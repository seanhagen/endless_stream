// Code generated by protoc-gen-go. DO NOT EDIT.
// source: output.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Skill_Target int32

const (
	Skill_Self   Skill_Target = 0
	Skill_Melee  Skill_Target = 1
	Skill_Ranged Skill_Target = 2
	Skill_AOE    Skill_Target = 3
)

var Skill_Target_name = map[int32]string{
	0: "Self",
	1: "Melee",
	2: "Ranged",
	3: "AOE",
}

var Skill_Target_value = map[string]int32{
	"Self":   0,
	"Melee":  1,
	"Ranged": 2,
	"AOE":    3,
}

func (x Skill_Target) String() string {
	return proto.EnumName(Skill_Target_name, int32(x))
}

func (Skill_Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{0, 0}
}

// Skill represents a player skill that can be used during battle.
type Skill struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level                int32        `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Target               Skill_Target `protobuf:"varint,4,opt,name=target,proto3,enum=endless.stream.v1.Skill_Target" json:"target,omitempty"`
	Cost                 int32        `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Cooldown             int32        `protobuf:"varint,6,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	CooldownLeft         int32        `protobuf:"varint,7,opt,name=cooldown_left,json=cooldownLeft,proto3" json:"cooldown_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Skill) Reset()         { *m = Skill{} }
func (m *Skill) String() string { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()    {}
func (*Skill) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{0}
}

func (m *Skill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Skill.Unmarshal(m, b)
}
func (m *Skill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Skill.Marshal(b, m, deterministic)
}
func (m *Skill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skill.Merge(m, src)
}
func (m *Skill) XXX_Size() int {
	return xxx_messageInfo_Skill.Size(m)
}
func (m *Skill) XXX_DiscardUnknown() {
	xxx_messageInfo_Skill.DiscardUnknown(m)
}

var xxx_messageInfo_Skill proto.InternalMessageInfo

func (m *Skill) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Skill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Skill) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Skill) GetTarget() Skill_Target {
	if m != nil {
		return m.Target
	}
	return Skill_Self
}

func (m *Skill) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Skill) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

func (m *Skill) GetCooldownLeft() int32 {
	if m != nil {
		return m.CooldownLeft
	}
	return 0
}

// Creature is the base stats shared by characters and monsters
type Creature struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxHp                int32          `protobuf:"varint,3,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	CurHp                int32          `protobuf:"varint,4,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	Position             int32          `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	Statuses             []StatusEffect `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=endless.stream.v1.StatusEffect" json:"statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Creature) Reset()         { *m = Creature{} }
func (m *Creature) String() string { return proto.CompactTextString(m) }
func (*Creature) ProtoMessage()    {}
func (*Creature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{1}
}

func (m *Creature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Creature.Unmarshal(m, b)
}
func (m *Creature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Creature.Marshal(b, m, deterministic)
}
func (m *Creature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creature.Merge(m, src)
}
func (m *Creature) XXX_Size() int {
	return xxx_messageInfo_Creature.Size(m)
}
func (m *Creature) XXX_DiscardUnknown() {
	xxx_messageInfo_Creature.DiscardUnknown(m)
}

var xxx_messageInfo_Creature proto.InternalMessageInfo

func (m *Creature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Creature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Creature) GetMaxHp() int32 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Creature) GetCurHp() int32 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *Creature) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Creature) GetStatuses() []StatusEffect {
	if m != nil {
		return m.Statuses
	}
	return nil
}

// Player represents a user or AI controlled character
type Player struct {
	Base                 *Creature `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Character            Class     `protobuf:"varint,2,opt,name=character,proto3,enum=endless.stream.v1.Class" json:"character,omitempty"`
	IsAi                 bool      `protobuf:"varint,3,opt,name=is_ai,json=isAi,proto3" json:"is_ai,omitempty"`
	Level                int32     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Skills               []*Skill  `protobuf:"bytes,5,rep,name=skills,proto3" json:"skills,omitempty"`
	Strength             int32     `protobuf:"varint,20,opt,name=strength,proto3" json:"strength,omitempty"`
	Vitality             int32     `protobuf:"varint,21,opt,name=vitality,proto3" json:"vitality,omitempty"`
	CombatDamageBase     int32     `protobuf:"varint,22,opt,name=combat_damage_base,json=combatDamageBase,proto3" json:"combat_damage_base,omitempty"`
	VitalityRegen        int32     `protobuf:"varint,23,opt,name=vitality_regen,json=vitalityRegen,proto3" json:"vitality_regen,omitempty"`
	Intelligence         int32     `protobuf:"varint,30,opt,name=intelligence,proto3" json:"intelligence,omitempty"`
	Focus                int32     `protobuf:"varint,31,opt,name=focus,proto3" json:"focus,omitempty"`
	Willpower            int32     `protobuf:"varint,32,opt,name=willpower,proto3" json:"willpower,omitempty"`
	FocusRegen           int32     `protobuf:"varint,33,opt,name=focus_regen,json=focusRegen,proto3" json:"focus_regen,omitempty"`
	Agility              int32     `protobuf:"varint,40,opt,name=agility,proto3" json:"agility,omitempty"`
	Evasion              int32     `protobuf:"varint,41,opt,name=evasion,proto3" json:"evasion,omitempty"`
	Accuracy             int32     `protobuf:"varint,42,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Initiative           int32     `protobuf:"varint,43,opt,name=initiative,proto3" json:"initiative,omitempty"`
	Gold                 int64     `protobuf:"varint,50,opt,name=gold,proto3" json:"gold,omitempty"`
	Xp                   int64     `protobuf:"varint,51,opt,name=xp,proto3" json:"xp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{2}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetBase() *Creature {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Player) GetCharacter() Class {
	if m != nil {
		return m.Character
	}
	return Class_Unknown
}

func (m *Player) GetIsAi() bool {
	if m != nil {
		return m.IsAi
	}
	return false
}

func (m *Player) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Player) GetSkills() []*Skill {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *Player) GetStrength() int32 {
	if m != nil {
		return m.Strength
	}
	return 0
}

func (m *Player) GetVitality() int32 {
	if m != nil {
		return m.Vitality
	}
	return 0
}

func (m *Player) GetCombatDamageBase() int32 {
	if m != nil {
		return m.CombatDamageBase
	}
	return 0
}

func (m *Player) GetVitalityRegen() int32 {
	if m != nil {
		return m.VitalityRegen
	}
	return 0
}

func (m *Player) GetIntelligence() int32 {
	if m != nil {
		return m.Intelligence
	}
	return 0
}

func (m *Player) GetFocus() int32 {
	if m != nil {
		return m.Focus
	}
	return 0
}

func (m *Player) GetWillpower() int32 {
	if m != nil {
		return m.Willpower
	}
	return 0
}

func (m *Player) GetFocusRegen() int32 {
	if m != nil {
		return m.FocusRegen
	}
	return 0
}

func (m *Player) GetAgility() int32 {
	if m != nil {
		return m.Agility
	}
	return 0
}

func (m *Player) GetEvasion() int32 {
	if m != nil {
		return m.Evasion
	}
	return 0
}

func (m *Player) GetAccuracy() int32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Player) GetInitiative() int32 {
	if m != nil {
		return m.Initiative
	}
	return 0
}

func (m *Player) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *Player) GetXp() int64 {
	if m != nil {
		return m.Xp
	}
	return 0
}

// Monster represents an enemy the characters are fighting
type Monster struct {
	Base                 *Creature `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Type                 Type      `protobuf:"varint,3,opt,name=type,proto3,enum=endless.stream.v1.Type" json:"type,omitempty"`
	IsFlying             bool      `protobuf:"varint,4,opt,name=is_flying,json=isFlying,proto3" json:"is_flying,omitempty"`
	IsBoss               bool      `protobuf:"varint,5,opt,name=is_boss,json=isBoss,proto3" json:"is_boss,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Monster) Reset()         { *m = Monster{} }
func (m *Monster) String() string { return proto.CompactTextString(m) }
func (*Monster) ProtoMessage()    {}
func (*Monster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{3}
}

func (m *Monster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monster.Unmarshal(m, b)
}
func (m *Monster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monster.Marshal(b, m, deterministic)
}
func (m *Monster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monster.Merge(m, src)
}
func (m *Monster) XXX_Size() int {
	return xxx_messageInfo_Monster.Size(m)
}
func (m *Monster) XXX_DiscardUnknown() {
	xxx_messageInfo_Monster.DiscardUnknown(m)
}

var xxx_messageInfo_Monster proto.InternalMessageInfo

func (m *Monster) GetBase() *Creature {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Monster) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_None
}

func (m *Monster) GetIsFlying() bool {
	if m != nil {
		return m.IsFlying
	}
	return false
}

func (m *Monster) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

type PlayerRegistered struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPlayer             bool     `protobuf:"varint,2,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRegistered) Reset()         { *m = PlayerRegistered{} }
func (m *PlayerRegistered) String() string { return proto.CompactTextString(m) }
func (*PlayerRegistered) ProtoMessage()    {}
func (*PlayerRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{4}
}

func (m *PlayerRegistered) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRegistered.Unmarshal(m, b)
}
func (m *PlayerRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRegistered.Marshal(b, m, deterministic)
}
func (m *PlayerRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRegistered.Merge(m, src)
}
func (m *PlayerRegistered) XXX_Size() int {
	return xxx_messageInfo_PlayerRegistered.Size(m)
}
func (m *PlayerRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRegistered proto.InternalMessageInfo

func (m *PlayerRegistered) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerRegistered) GetIsPlayer() bool {
	if m != nil {
		return m.IsPlayer
	}
	return false
}

// EventMessage is used when the game needs to display a message in the UI
type EventMessage struct {
	// MsgId is the id of the message
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// Msg contains the message content
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// IsError is true if the message is about an error that has occured
	IsError bool `protobuf:"varint,3,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	// IsAlert is true if the message is an alert, and only has an "Ok" button.
	// False means it's a confirmation, which has an "Yes" & "No" button
	IsAlert bool `protobuf:"varint,4,opt,name=is_alert,json=isAlert,proto3" json:"is_alert,omitempty"`
	// PlayerId is set only if the message is for a specific player.
	PlayerId *wrappers.StringValue `protobuf:"bytes,5,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// LogOnly is a boolean that if true, messages go into the player log without
	// getting any kind of notification
	LogOnly              bool     `protobuf:"varint,6,opt,name=log_only,json=logOnly,proto3" json:"log_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventMessage) Reset()         { *m = EventMessage{} }
func (m *EventMessage) String() string { return proto.CompactTextString(m) }
func (*EventMessage) ProtoMessage()    {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{5}
}

func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventMessage.Unmarshal(m, b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return xxx_messageInfo_EventMessage.Size(m)
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

func (m *EventMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *EventMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EventMessage) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *EventMessage) GetIsAlert() bool {
	if m != nil {
		return m.IsAlert
	}
	return false
}

func (m *EventMessage) GetPlayerId() *wrappers.StringValue {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *EventMessage) GetLogOnly() bool {
	if m != nil {
		return m.LogOnly
	}
	return false
}

// CharacterSelected is sent by the game when someone selects a character
// on the character selection screen. This is used to disable that character in the UI
// so nobody else can select it.
type CharacterSelected struct {
	Selected             map[string]Class `protobuf:"bytes,1,rep,name=selected,proto3" json:"selected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=endless.stream.v1.Class"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CharacterSelected) Reset()         { *m = CharacterSelected{} }
func (m *CharacterSelected) String() string { return proto.CompactTextString(m) }
func (*CharacterSelected) ProtoMessage()    {}
func (*CharacterSelected) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{6}
}

func (m *CharacterSelected) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CharacterSelected.Unmarshal(m, b)
}
func (m *CharacterSelected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CharacterSelected.Marshal(b, m, deterministic)
}
func (m *CharacterSelected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CharacterSelected.Merge(m, src)
}
func (m *CharacterSelected) XXX_Size() int {
	return xxx_messageInfo_CharacterSelected.Size(m)
}
func (m *CharacterSelected) XXX_DiscardUnknown() {
	xxx_messageInfo_CharacterSelected.DiscardUnknown(m)
}

var xxx_messageInfo_CharacterSelected proto.InternalMessageInfo

func (m *CharacterSelected) GetSelected() map[string]Class {
	if m != nil {
		return m.Selected
	}
	return nil
}

// Wave has some basic information about the wave
type Wave struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HasBoss              bool     `protobuf:"varint,2,opt,name=has_boss,json=hasBoss,proto3" json:"has_boss,omitempty"`
	Level                Level    `protobuf:"varint,3,opt,name=level,proto3,enum=endless.stream.v1.Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wave) Reset()         { *m = Wave{} }
func (m *Wave) String() string { return proto.CompactTextString(m) }
func (*Wave) ProtoMessage()    {}
func (*Wave) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{7}
}

func (m *Wave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wave.Unmarshal(m, b)
}
func (m *Wave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wave.Marshal(b, m, deterministic)
}
func (m *Wave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wave.Merge(m, src)
}
func (m *Wave) XXX_Size() int {
	return xxx_messageInfo_Wave.Size(m)
}
func (m *Wave) XXX_DiscardUnknown() {
	xxx_messageInfo_Wave.DiscardUnknown(m)
}

var xxx_messageInfo_Wave proto.InternalMessageInfo

func (m *Wave) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Wave) GetHasBoss() bool {
	if m != nil {
		return m.HasBoss
	}
	return false
}

func (m *Wave) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_Forest
}

// CurrentState is sent after something has happened to change the state.
type CurrentState struct {
	// Monsters holds an array of the monsters in the current wave
	Monsters []*Monster `protobuf:"bytes,1,rep,name=monsters,proto3" json:"monsters,omitempty"`
	// Players contains a list of id->Player of who's in the game currently
	Players       map[string]*Player    `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrentPlayer *wrappers.StringValue `protobuf:"bytes,3,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`
	// Display indicates what screen every client should be on.
	Display Display `protobuf:"varint,4,opt,name=display,proto3,enum=endless.stream.v1.Display" json:"display,omitempty"`
	// CurrentWave is used to indicate what the current wave is
	CurrentWave *Wave `protobuf:"bytes,5,opt,name=current_wave,json=currentWave,proto3" json:"current_wave,omitempty"`
	// UpcomingWaves is used to show an "upcoming waves" tracker on the shared info screen
	UpcomingWaves        map[int32]*Wave `protobuf:"bytes,6,rep,name=upcoming_waves,json=upcomingWaves,proto3" json:"upcoming_waves,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AudienceCount        int32           `protobuf:"varint,7,opt,name=audience_count,json=audienceCount,proto3" json:"audience_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CurrentState) Reset()         { *m = CurrentState{} }
func (m *CurrentState) String() string { return proto.CompactTextString(m) }
func (*CurrentState) ProtoMessage()    {}
func (*CurrentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{8}
}

func (m *CurrentState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentState.Unmarshal(m, b)
}
func (m *CurrentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentState.Marshal(b, m, deterministic)
}
func (m *CurrentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentState.Merge(m, src)
}
func (m *CurrentState) XXX_Size() int {
	return xxx_messageInfo_CurrentState.Size(m)
}
func (m *CurrentState) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentState.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentState proto.InternalMessageInfo

func (m *CurrentState) GetMonsters() []*Monster {
	if m != nil {
		return m.Monsters
	}
	return nil
}

func (m *CurrentState) GetPlayers() map[string]*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CurrentState) GetCurrentPlayer() *wrappers.StringValue {
	if m != nil {
		return m.CurrentPlayer
	}
	return nil
}

func (m *CurrentState) GetDisplay() Display {
	if m != nil {
		return m.Display
	}
	return Display_CharacterSelect
}

func (m *CurrentState) GetCurrentWave() *Wave {
	if m != nil {
		return m.CurrentWave
	}
	return nil
}

func (m *CurrentState) GetUpcomingWaves() map[int32]*Wave {
	if m != nil {
		return m.UpcomingWaves
	}
	return nil
}

func (m *CurrentState) GetAudienceCount() int32 {
	if m != nil {
		return m.AudienceCount
	}
	return 0
}

// Tick is a message that's sent out on a set schedule
// that informs things like countdown timers and whatnot
type Tick struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tick) Reset()         { *m = Tick{} }
func (m *Tick) String() string { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()    {}
func (*Tick) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{9}
}

func (m *Tick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tick.Unmarshal(m, b)
}
func (m *Tick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tick.Marshal(b, m, deterministic)
}
func (m *Tick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tick.Merge(m, src)
}
func (m *Tick) XXX_Size() int {
	return xxx_messageInfo_Tick.Size(m)
}
func (m *Tick) XXX_DiscardUnknown() {
	xxx_messageInfo_Tick.DiscardUnknown(m)
}

var xxx_messageInfo_Tick proto.InternalMessageInfo

type JoinedGame struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AsAudience           bool     `protobuf:"varint,2,opt,name=as_audience,json=asAudience,proto3" json:"as_audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinedGame) Reset()         { *m = JoinedGame{} }
func (m *JoinedGame) String() string { return proto.CompactTextString(m) }
func (*JoinedGame) ProtoMessage()    {}
func (*JoinedGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{10}
}

func (m *JoinedGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinedGame.Unmarshal(m, b)
}
func (m *JoinedGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinedGame.Marshal(b, m, deterministic)
}
func (m *JoinedGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinedGame.Merge(m, src)
}
func (m *JoinedGame) XXX_Size() int {
	return xxx_messageInfo_JoinedGame.Size(m)
}
func (m *JoinedGame) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinedGame.DiscardUnknown(m)
}

var xxx_messageInfo_JoinedGame proto.InternalMessageInfo

func (m *JoinedGame) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinedGame) GetAsAudience() bool {
	if m != nil {
		return m.AsAudience
	}
	return false
}

type Output struct {
	// Types that are valid to be assigned to Data:
	//	*Output_State
	//	*Output_Joined
	//	*Output_Tick
	//	*Output_Msg
	Data                 isOutput_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{11}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

type isOutput_Data interface {
	isOutput_Data()
}

type Output_State struct {
	State *CurrentState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type Output_Joined struct {
	Joined *JoinedGame `protobuf:"bytes,2,opt,name=joined,proto3,oneof"`
}

type Output_Tick struct {
	Tick *Tick `protobuf:"bytes,3,opt,name=tick,proto3,oneof"`
}

type Output_Msg struct {
	Msg *EventMessage `protobuf:"bytes,4,opt,name=msg,proto3,oneof"`
}

func (*Output_State) isOutput_Data() {}

func (*Output_Joined) isOutput_Data() {}

func (*Output_Tick) isOutput_Data() {}

func (*Output_Msg) isOutput_Data() {}

func (m *Output) GetData() isOutput_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Output) GetState() *CurrentState {
	if x, ok := m.GetData().(*Output_State); ok {
		return x.State
	}
	return nil
}

func (m *Output) GetJoined() *JoinedGame {
	if x, ok := m.GetData().(*Output_Joined); ok {
		return x.Joined
	}
	return nil
}

func (m *Output) GetTick() *Tick {
	if x, ok := m.GetData().(*Output_Tick); ok {
		return x.Tick
	}
	return nil
}

func (m *Output) GetMsg() *EventMessage {
	if x, ok := m.GetData().(*Output_Msg); ok {
		return x.Msg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Output) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Output_State)(nil),
		(*Output_Joined)(nil),
		(*Output_Tick)(nil),
		(*Output_Msg)(nil),
	}
}

func init() {
	proto.RegisterEnum("endless.stream.v1.Skill_Target", Skill_Target_name, Skill_Target_value)
	proto.RegisterType((*Skill)(nil), "endless.stream.v1.Skill")
	proto.RegisterType((*Creature)(nil), "endless.stream.v1.Creature")
	proto.RegisterType((*Player)(nil), "endless.stream.v1.Player")
	proto.RegisterType((*Monster)(nil), "endless.stream.v1.Monster")
	proto.RegisterType((*PlayerRegistered)(nil), "endless.stream.v1.PlayerRegistered")
	proto.RegisterType((*EventMessage)(nil), "endless.stream.v1.EventMessage")
	proto.RegisterType((*CharacterSelected)(nil), "endless.stream.v1.CharacterSelected")
	proto.RegisterMapType((map[string]Class)(nil), "endless.stream.v1.CharacterSelected.SelectedEntry")
	proto.RegisterType((*Wave)(nil), "endless.stream.v1.Wave")
	proto.RegisterType((*CurrentState)(nil), "endless.stream.v1.CurrentState")
	proto.RegisterMapType((map[string]*Player)(nil), "endless.stream.v1.CurrentState.PlayersEntry")
	proto.RegisterMapType((map[int32]*Wave)(nil), "endless.stream.v1.CurrentState.UpcomingWavesEntry")
	proto.RegisterType((*Tick)(nil), "endless.stream.v1.Tick")
	proto.RegisterType((*JoinedGame)(nil), "endless.stream.v1.JoinedGame")
	proto.RegisterType((*Output)(nil), "endless.stream.v1.Output")
}

func init() { proto.RegisterFile("output.proto", fileDescriptor_0b2b3ae2e703b013) }

var fileDescriptor_0b2b3ae2e703b013 = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x8f, 0xed, 0xf3, 0x9f, 0x4c, 0x1c, 0xcb, 0x5d, 0x5a, 0x7a, 0x75, 0x4b, 0x63, 0x8c, 0x90,
	0x02, 0x6d, 0xed, 0xe2, 0x22, 0x0a, 0x45, 0x08, 0x25, 0x69, 0x4a, 0x8a, 0x5a, 0x8a, 0x2e, 0x2d,
	0xa8, 0xbc, 0x9c, 0xd6, 0x77, 0xe3, 0xf3, 0x92, 0xf5, 0xdd, 0xe9, 0x76, 0xcf, 0x89, 0x9f, 0xf9,
	0x1c, 0x7c, 0x0c, 0x5e, 0x78, 0xe5, 0xbb, 0x20, 0xbe, 0x02, 0x6f, 0x68, 0xff, 0x5c, 0xec, 0xb6,
	0x17, 0xb5, 0xe2, 0x6d, 0x67, 0xe6, 0x37, 0xb3, 0x33, 0xb3, 0xbf, 0x99, 0x3b, 0x68, 0x27, 0xb9,
	0x4c, 0x73, 0x39, 0x4c, 0xb3, 0x44, 0x26, 0xe4, 0x12, 0xc6, 0x21, 0x47, 0x21, 0x86, 0x42, 0x66,
	0x48, 0xe7, 0xc3, 0xc5, 0x67, 0xbd, 0x9b, 0x51, 0x92, 0x44, 0x1c, 0x47, 0x1a, 0x30, 0xc9, 0xa7,
	0xa3, 0xd3, 0x8c, 0xa6, 0x29, 0x66, 0xc2, 0xb8, 0xf4, 0x20, 0x97, 0x8c, 0x9b, 0xf3, 0xe0, 0xb7,
	0x2a, 0xd4, 0x8f, 0x4f, 0x18, 0xe7, 0xa4, 0x03, 0x55, 0x16, 0xba, 0x95, 0x7e, 0x65, 0x77, 0xd3,
	0xab, 0xb2, 0x90, 0x10, 0x70, 0x62, 0x3a, 0x47, 0xb7, 0xaa, 0x35, 0xfa, 0x4c, 0x2e, 0x43, 0x9d,
	0xe3, 0x02, 0xb9, 0x5b, 0xeb, 0x57, 0x76, 0xeb, 0x9e, 0x11, 0xc8, 0x7d, 0x68, 0x48, 0x9a, 0x45,
	0x28, 0x5d, 0xa7, 0x5f, 0xd9, 0xed, 0x8c, 0x77, 0x86, 0x6f, 0xe4, 0x34, 0xd4, 0x77, 0x0c, 0x9f,
	0x6b, 0x98, 0x67, 0xe1, 0xea, 0x8a, 0x20, 0x11, 0xd2, 0xad, 0xeb, 0x68, 0xfa, 0x4c, 0x7a, 0xd0,
	0x0a, 0x92, 0x84, 0x87, 0xc9, 0x69, 0xec, 0x36, 0xb4, 0xfe, 0x5c, 0x26, 0x1f, 0xc1, 0x76, 0x71,
	0xf6, 0x39, 0x4e, 0xa5, 0xdb, 0xd4, 0x80, 0x76, 0xa1, 0x7c, 0x82, 0x53, 0x39, 0x18, 0x43, 0xc3,
	0x5c, 0x43, 0x5a, 0xe0, 0x1c, 0x23, 0x9f, 0x76, 0x37, 0xc8, 0x26, 0xd4, 0x9f, 0x22, 0x47, 0xec,
	0x56, 0x08, 0x40, 0xc3, 0xa3, 0x71, 0x84, 0x61, 0xb7, 0x4a, 0x9a, 0x50, 0xdb, 0x7b, 0x76, 0xd8,
	0xad, 0x0d, 0xfe, 0xa8, 0x40, 0xeb, 0x20, 0x43, 0x2a, 0xf3, 0x0c, 0xdf, 0xa9, 0x11, 0x57, 0xa0,
	0x31, 0xa7, 0x67, 0xfe, 0x2c, 0x2d, 0x3a, 0x31, 0xa7, 0x67, 0x47, 0xa9, 0x52, 0x07, 0x79, 0xa6,
	0xd4, 0x8e, 0x51, 0x07, 0x79, 0x76, 0x94, 0xaa, 0x9a, 0xd2, 0x44, 0x30, 0xc9, 0x92, 0xd8, 0xd6,
	0x7a, 0x2e, 0x93, 0xaf, 0xa1, 0x25, 0x24, 0x95, 0xb9, 0x40, 0xe1, 0x36, 0xfa, 0xb5, 0x8b, 0xda,
	0xa7, 0x21, 0x87, 0xd3, 0x29, 0x06, 0xd2, 0x3b, 0x77, 0x18, 0xfc, 0xe3, 0x40, 0xe3, 0x47, 0x4e,
	0x97, 0x98, 0x91, 0x11, 0x38, 0x13, 0x2a, 0x50, 0xe7, 0xbd, 0x35, 0xbe, 0x5e, 0x12, 0xa3, 0x28,
	0xd0, 0xd3, 0x40, 0xf2, 0x05, 0x6c, 0x06, 0x33, 0x9a, 0xd1, 0x40, 0x62, 0xa6, 0x6b, 0xeb, 0x8c,
	0xdd, 0x32, 0x2f, 0x4e, 0x85, 0xf0, 0x56, 0x50, 0xf2, 0x1e, 0xd4, 0x99, 0xf0, 0x29, 0xd3, 0x95,
	0xb7, 0x3c, 0x87, 0x89, 0x3d, 0xb6, 0x22, 0x86, 0xb3, 0x4e, 0x8c, 0xbb, 0xd0, 0x10, 0xea, 0xdd,
	0x85, 0x5b, 0xef, 0xd7, 0x76, 0xb7, 0x4a, 0xe3, 0x6b, 0x62, 0x78, 0x16, 0xa7, 0x3a, 0xa5, 0x4c,
	0x71, 0x24, 0x67, 0xee, 0x65, 0xd3, 0xa9, 0x42, 0x56, 0xb6, 0x05, 0x93, 0x94, 0x33, 0xb9, 0x74,
	0xaf, 0x18, 0x5b, 0x21, 0x93, 0xdb, 0x40, 0x82, 0x64, 0x3e, 0xa1, 0xd2, 0x0f, 0xe9, 0x9c, 0x46,
	0xe8, 0xeb, 0x5e, 0xbc, 0xaf, 0x51, 0x5d, 0x63, 0x79, 0xa8, 0x0d, 0xfb, 0xaa, 0xf4, 0x8f, 0xa1,
	0x53, 0x78, 0xfa, 0x19, 0x46, 0x18, 0xbb, 0x57, 0x35, 0x72, 0xbb, 0xd0, 0x7a, 0x4a, 0x49, 0x06,
	0xd0, 0x66, 0xb1, 0x44, 0xce, 0x59, 0x84, 0x71, 0x80, 0xee, 0x4d, 0xc3, 0xb6, 0x75, 0x9d, 0x2a,
	0x7c, 0x9a, 0x04, 0xb9, 0x70, 0x77, 0x4c, 0xe1, 0x5a, 0x20, 0x37, 0x60, 0xf3, 0x94, 0x71, 0x9e,
	0x26, 0xa7, 0x98, 0xb9, 0x7d, 0x6d, 0x59, 0x29, 0xc8, 0x0e, 0x6c, 0x69, 0x98, 0xbd, 0xfb, 0x43,
	0x6d, 0x07, 0xad, 0x32, 0x17, 0xbb, 0xd0, 0xa4, 0x11, 0xd3, 0x85, 0xee, 0x6a, 0x63, 0x21, 0x2a,
	0x0b, 0x2e, 0xa8, 0x50, 0x44, 0xfa, 0xc4, 0x58, 0xac, 0xa8, 0xba, 0x43, 0x83, 0x20, 0xcf, 0x68,
	0xb0, 0x74, 0x3f, 0x35, 0xdd, 0x29, 0x64, 0x72, 0x13, 0x80, 0xc5, 0x4c, 0x32, 0x2a, 0xd9, 0x02,
	0xdd, 0x5b, 0xe6, 0xbe, 0x95, 0x46, 0x31, 0x3c, 0x4a, 0x78, 0xe8, 0x8e, 0xfb, 0x95, 0xdd, 0x9a,
	0xa7, 0xcf, 0x6a, 0x0a, 0xce, 0x52, 0xf7, 0x9e, 0xd6, 0x54, 0xcf, 0xd2, 0xc1, 0xef, 0x15, 0x68,
	0x3e, 0x4d, 0x62, 0x21, 0xff, 0x0f, 0xd7, 0x6e, 0x81, 0x23, 0x97, 0x29, 0x6a, 0xca, 0x74, 0xc6,
	0x57, 0x4b, 0x1c, 0x9e, 0x2f, 0x53, 0xf4, 0x34, 0x88, 0x5c, 0x87, 0x4d, 0x26, 0xfc, 0x29, 0x5f,
	0xb2, 0x38, 0xd2, 0x7c, 0x6a, 0x79, 0x2d, 0x26, 0x1e, 0x69, 0x99, 0x5c, 0x85, 0x26, 0x13, 0xfe,
	0x24, 0x11, 0x42, 0x4f, 0x52, 0xcb, 0x6b, 0x30, 0xb1, 0x9f, 0x08, 0x31, 0xf8, 0x16, 0xba, 0x66,
	0x12, 0x3c, 0x8c, 0x98, 0xca, 0x12, 0xc3, 0x37, 0x26, 0xd9, 0x44, 0x4e, 0x35, 0x4c, 0x53, 0x5e,
	0x47, 0x36, 0x6e, 0x83, 0xbf, 0x2a, 0xd0, 0x3e, 0x5c, 0x60, 0x2c, 0x9f, 0xa2, 0x10, 0x34, 0x32,
	0x33, 0x2e, 0x22, 0xdf, 0x46, 0x50, 0x33, 0x2e, 0xa2, 0xc7, 0x21, 0xe9, 0x42, 0x6d, 0x2e, 0x22,
	0xbb, 0x0d, 0xd4, 0x91, 0x5c, 0x83, 0x16, 0x13, 0x3e, 0x66, 0x59, 0x92, 0xd9, 0xa1, 0x68, 0x32,
	0x71, 0xa8, 0x44, 0x6b, 0xa2, 0x1c, 0x33, 0x69, 0x4b, 0x69, 0x32, 0xb1, 0xa7, 0x44, 0xf2, 0x15,
	0x6c, 0x9a, 0x4c, 0xd4, 0x0d, 0x75, 0xdd, 0xc9, 0x1b, 0x43, 0xb3, 0xb9, 0x87, 0xc5, 0xe6, 0x1e,
	0x1e, 0xcb, 0x8c, 0xc5, 0xd1, 0x4f, 0x94, 0xe7, 0xe8, 0xb5, 0x0c, 0xfc, 0x71, 0xa8, 0xa2, 0xf2,
	0x24, 0xf2, 0x93, 0x98, 0x2f, 0xf5, 0x8e, 0x6c, 0x79, 0x4d, 0x9e, 0x44, 0xcf, 0x62, 0xbe, 0x1c,
	0xfc, 0x59, 0x81, 0x4b, 0x07, 0xc5, 0xac, 0x1e, 0x23, 0xc7, 0x40, 0x62, 0x48, 0x7e, 0x80, 0x96,
	0xb0, 0x67, 0xb7, 0xa2, 0x47, 0x71, 0x5c, 0xf6, 0x68, 0xaf, 0xfb, 0x0d, 0x8b, 0xc3, 0x61, 0x2c,
	0xb3, 0xa5, 0x77, 0x1e, 0xa3, 0xf7, 0x02, 0xb6, 0x5f, 0x31, 0xa9, 0xa6, 0x9c, 0xe0, 0xd2, 0xb6,
	0x5a, 0x1d, 0xc9, 0x10, 0xea, 0x0b, 0x95, 0xf6, 0x5b, 0x57, 0x8b, 0x81, 0x3d, 0xa8, 0x7e, 0x59,
	0x19, 0x04, 0xe0, 0xfc, 0x4c, 0x17, 0xa8, 0xa2, 0xc5, 0xf9, 0xdc, 0xb6, 0x5d, 0x1d, 0x55, 0xc5,
	0x33, 0x6a, 0xdf, 0xdd, 0x3c, 0x5c, 0x73, 0x46, 0xf5, 0xc3, 0xab, 0x8b, 0x56, 0xdf, 0xa4, 0xf2,
	0x8b, 0x9e, 0x28, 0xbb, 0x5d, 0x4a, 0x83, 0x7f, 0x1d, 0x68, 0x1f, 0xe4, 0x59, 0x86, 0xb1, 0x54,
	0x5b, 0x55, 0x2d, 0xc2, 0xd6, 0xdc, 0x10, 0x5b, 0xd8, 0xe6, 0xf4, 0x4a, 0x62, 0x58, 0xee, 0x7b,
	0xe7, 0x58, 0xf2, 0x08, 0x9a, 0xe6, 0x45, 0x54, 0x4a, 0xca, 0xed, 0x76, 0x59, 0x8d, 0x6b, 0x37,
	0x0d, 0x0d, 0xd3, 0x84, 0xe9, 0x66, 0xe1, 0x4c, 0x0e, 0xa0, 0x13, 0x18, 0x54, 0x41, 0xcd, 0xda,
	0x3b, 0xb0, 0x61, 0xdb, 0xfa, 0xd8, 0xf5, 0xff, 0x39, 0x34, 0x43, 0x26, 0x94, 0xbf, 0xfd, 0x08,
	0x97, 0xd5, 0xf0, 0xd0, 0x20, 0xbc, 0x02, 0x4a, 0x1e, 0x40, 0xbb, 0xb8, 0xfa, 0x94, 0x2e, 0xd0,
	0xd2, 0xb0, 0x6c, 0x3e, 0xd5, 0xbb, 0x78, 0x5b, 0x16, 0xac, 0x1f, 0xe9, 0x25, 0x74, 0xf2, 0x34,
	0x48, 0xe6, 0x2c, 0x8e, 0xb4, 0xb3, 0xf9, 0x7c, 0x5d, 0xc0, 0xac, 0xf5, 0x2e, 0xbc, 0xb0, 0x5e,
	0x2a, 0x8a, 0xed, 0xc5, 0x76, 0xbe, 0xae, 0x53, 0xfb, 0x99, 0xe6, 0x21, 0x53, 0x0b, 0xd6, 0x0f,
	0x92, 0x3c, 0x2e, 0x3e, 0xf4, 0xdb, 0x85, 0xf6, 0x40, 0x29, 0x7b, 0x2f, 0xa0, 0xbd, 0xde, 0xd1,
	0x12, 0x12, 0x8e, 0xd6, 0x49, 0xb8, 0x35, 0xbe, 0x56, 0x92, 0x9a, 0x5d, 0x1a, 0x2b, 0x16, 0xf6,
	0x5e, 0x02, 0x79, 0x33, 0xc5, 0xf5, 0xe0, 0x75, 0x13, 0xfc, 0xce, 0xab, 0xc1, 0x2f, 0xec, 0xda,
	0x1a, 0xc1, 0x1b, 0xe0, 0x3c, 0x67, 0xc1, 0xc9, 0xe0, 0x1b, 0x80, 0xef, 0x13, 0x16, 0x63, 0xf8,
	0x9d, 0xfa, 0x99, 0x78, 0x7d, 0x4d, 0xed, 0xc0, 0x16, 0x15, 0x7e, 0x51, 0xab, 0xe5, 0x3b, 0x50,
	0xb1, 0x67, 0x35, 0x83, 0xbf, 0x2b, 0xd0, 0x78, 0xa6, 0x7f, 0x02, 0xc9, 0x7d, 0xa8, 0xab, 0xbf,
	0x81, 0x62, 0x17, 0xef, 0xbc, 0xa5, 0xf9, 0x47, 0x1b, 0x9e, 0xc1, 0xab, 0x9f, 0xb6, 0x5f, 0x75,
	0x0a, 0x36, 0xfd, 0x0f, 0x4a, 0x3c, 0x57, 0x39, 0x1e, 0x6d, 0x78, 0x16, 0x4e, 0xee, 0x80, 0x23,
	0x59, 0x70, 0x62, 0x49, 0x5a, 0xba, 0xcb, 0x59, 0x70, 0x72, 0xb4, 0xe1, 0x69, 0x18, 0xb9, 0x67,
	0xd6, 0xa5, 0x73, 0x61, 0x7a, 0xeb, 0x3b, 0xf7, 0x68, 0x43, 0x6f, 0xd4, 0xfd, 0x06, 0x38, 0x21,
	0x95, 0x74, 0x7f, 0xfc, 0xcb, 0xdd, 0x88, 0xc9, 0x59, 0x3e, 0x19, 0x06, 0xc9, 0x7c, 0x24, 0x90,
	0xc6, 0x33, 0x1a, 0x61, 0x3c, 0xb2, 0x51, 0x7c, 0x13, 0x65, 0x34, 0xa1, 0xc1, 0x09, 0xc6, 0xe1,
	0x28, 0xca, 0xd2, 0x60, 0xd2, 0xd0, 0xe3, 0x72, 0xef, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77,
	0xbc, 0x9d, 0x3b, 0x27, 0x0b, 0x00, 0x00,
}
