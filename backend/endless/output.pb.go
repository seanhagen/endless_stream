// Code generated by protoc-gen-go. DO NOT EDIT.
// source: output.proto

package endless

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Target int32

const (
	// Self means the skill/item only affects the actor
	Target_Self Target = 0
	// Melee means the actor must be in the same threat zone for the skill/item to affect them
	Target_Melee Target = 1
	// Ranged means the actor can hit any other actor, regardless of positition
	Target_Ranged Target = 2
	// AOE means the skill/item affects all other actors in the chosen threat zone
	Target_AOE Target = 3
)

var Target_name = map[int32]string{
	0: "Self",
	1: "Melee",
	2: "Ranged",
	3: "AOE",
}

var Target_value = map[string]int32{
	"Self":   0,
	"Melee":  1,
	"Ranged": 2,
	"AOE":    3,
}

func (x Target) String() string {
	return proto.EnumName(Target_name, int32(x))
}

func (Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{0}
}

// Position describes where in the arena an actor is
type Position int32

const (
	// Left is the player side
	Position_Left Position = 0
	// Middle is the center of the arena
	Position_Middle Position = 1
	// Right is the monster spawn side
	Position_Right Position = 2
)

var Position_name = map[int32]string{
	0: "Left",
	1: "Middle",
	2: "Right",
}

var Position_value = map[string]int32{
	"Left":   0,
	"Middle": 1,
	"Right":  2,
}

func (x Position) String() string {
	return proto.EnumName(Position_name, int32(x))
}

func (Position) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{1}
}

// Skill represents a player skill that can be used during battle.
type Skill struct {
	// Id is the UUID of the skill
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the human-readable name of the skill
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Level is the current level of the skill, starts at 0 for all
	Level int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	// Target is for who/what the skill can target
	Target Target `protobuf:"varint,4,opt,name=target,proto3,enum=endless.stream.v1.Target" json:"target,omitempty"`
	// Cost is how much focus is required to activate the skill
	Cost int32 `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	// Cooldown is how many turns it takes for the skill to become usable again
	Cooldown int32 `protobuf:"varint,6,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	// CooldownLeft is how many turns are left until the skill is usable again
	CooldownLeft int32 `protobuf:"varint,7,opt,name=cooldown_left,json=cooldownLeft,proto3" json:"cooldown_left,omitempty"`
	// Active is true when the skill is usable. If the skill isn't unlocked, or a status
	// prevents the usage of the skill, this will be false.
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	// Upgradable is true while the skill is upgradable. Once a skill has reached max level
	// this becomes false.
	Upgradable bool `protobuf:"varint,9,opt,name=upgradable,proto3" json:"upgradable,omitempty"`
	// Description is a human readable name for the skill.
	Description          string   `protobuf:"bytes,50,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Skill) Reset()         { *m = Skill{} }
func (m *Skill) String() string { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()    {}
func (*Skill) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{0}
}

func (m *Skill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Skill.Unmarshal(m, b)
}
func (m *Skill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Skill.Marshal(b, m, deterministic)
}
func (m *Skill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skill.Merge(m, src)
}
func (m *Skill) XXX_Size() int {
	return xxx_messageInfo_Skill.Size(m)
}
func (m *Skill) XXX_DiscardUnknown() {
	xxx_messageInfo_Skill.DiscardUnknown(m)
}

var xxx_messageInfo_Skill proto.InternalMessageInfo

func (m *Skill) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Skill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Skill) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Skill) GetTarget() Target {
	if m != nil {
		return m.Target
	}
	return Target_Self
}

func (m *Skill) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Skill) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

func (m *Skill) GetCooldownLeft() int32 {
	if m != nil {
		return m.CooldownLeft
	}
	return 0
}

func (m *Skill) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Skill) GetUpgradable() bool {
	if m != nil {
		return m.Upgradable
	}
	return false
}

func (m *Skill) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Item represents something the player can carry and use.
type Item struct {
	// Id is the UUID that represents the item
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the human-readable name of the item
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Target is so the UI can show how many targets the item can affect
	Target Target `protobuf:"varint,3,opt,name=target,proto3,enum=endless.stream.v1.Target" json:"target,omitempty"`
	// Passive is if the item is passive/equipable
	Passive bool `protobuf:"varint,4,opt,name=passive,proto3" json:"passive,omitempty"`
	// Bonus is a map of attribute name -> bonus that shows how the item affects
	// the player character ( ongoing for passive items, or immediate bonus otherwise)
	Bonus map[string]int32 `protobuf:"bytes,6,rep,name=bonus,proto3" json:"bonus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Count is how many copies of this item the player has
	Count int32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	// Active is if the item is currently usable. Some items can be used at any time
	// (such as health potions), some are only usable on that players turn
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	// Description is the human readable description of what the item is
	// and what it does
	Description          string   `protobuf:"bytes,50,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{1}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetTarget() Target {
	if m != nil {
		return m.Target
	}
	return Target_Self
}

func (m *Item) GetPassive() bool {
	if m != nil {
		return m.Passive
	}
	return false
}

func (m *Item) GetBonus() map[string]int32 {
	if m != nil {
		return m.Bonus
	}
	return nil
}

func (m *Item) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Item) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Creature is the base stats shared by characters and monsters
type Creature struct {
	// Id is the UUID for the creature
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the human readable name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// MaxHp is the maximum amount of HP the creature can have
	MaxHp int32 `protobuf:"varint,3,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// CurHp is the current HP value
	CurHp int32 `protobuf:"varint,4,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// Position deetermines what threat zone the creature is currently standing in
	Position Position `protobuf:"varint,5,opt,name=position,proto3,enum=endless.stream.v1.Position" json:"position,omitempty"`
	// Statuses is a list of effects that currently affect this creature.
	Statuses             []StatusEffect `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=endless.stream.v1.StatusEffect" json:"statuses,omitempty"`
	Strength             int32          `protobuf:"varint,20,opt,name=strength,proto3" json:"strength,omitempty"`
	Vitality             int32          `protobuf:"varint,21,opt,name=vitality,proto3" json:"vitality,omitempty"`
	CombatDamageBase     int32          `protobuf:"varint,22,opt,name=combat_damage_base,json=combatDamageBase,proto3" json:"combat_damage_base,omitempty"`
	VitalityRegen        int32          `protobuf:"varint,23,opt,name=vitality_regen,json=vitalityRegen,proto3" json:"vitality_regen,omitempty"`
	Intelligence         int32          `protobuf:"varint,30,opt,name=intelligence,proto3" json:"intelligence,omitempty"`
	Focus                int32          `protobuf:"varint,31,opt,name=focus,proto3" json:"focus,omitempty"`
	Willpower            int32          `protobuf:"varint,32,opt,name=willpower,proto3" json:"willpower,omitempty"`
	FocusRegen           int32          `protobuf:"varint,33,opt,name=focus_regen,json=focusRegen,proto3" json:"focus_regen,omitempty"`
	Agility              int32          `protobuf:"varint,40,opt,name=agility,proto3" json:"agility,omitempty"`
	Evasion              int32          `protobuf:"varint,41,opt,name=evasion,proto3" json:"evasion,omitempty"`
	Accuracy             int32          `protobuf:"varint,42,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Initiative           int32          `protobuf:"varint,43,opt,name=initiative,proto3" json:"initiative,omitempty"`
	Gold                 int64          `protobuf:"varint,50,opt,name=gold,proto3" json:"gold,omitempty"`
	Xp                   int64          `protobuf:"varint,51,opt,name=xp,proto3" json:"xp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Creature) Reset()         { *m = Creature{} }
func (m *Creature) String() string { return proto.CompactTextString(m) }
func (*Creature) ProtoMessage()    {}
func (*Creature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{2}
}

func (m *Creature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Creature.Unmarshal(m, b)
}
func (m *Creature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Creature.Marshal(b, m, deterministic)
}
func (m *Creature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creature.Merge(m, src)
}
func (m *Creature) XXX_Size() int {
	return xxx_messageInfo_Creature.Size(m)
}
func (m *Creature) XXX_DiscardUnknown() {
	xxx_messageInfo_Creature.DiscardUnknown(m)
}

var xxx_messageInfo_Creature proto.InternalMessageInfo

func (m *Creature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Creature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Creature) GetMaxHp() int32 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Creature) GetCurHp() int32 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *Creature) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_Left
}

func (m *Creature) GetStatuses() []StatusEffect {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *Creature) GetStrength() int32 {
	if m != nil {
		return m.Strength
	}
	return 0
}

func (m *Creature) GetVitality() int32 {
	if m != nil {
		return m.Vitality
	}
	return 0
}

func (m *Creature) GetCombatDamageBase() int32 {
	if m != nil {
		return m.CombatDamageBase
	}
	return 0
}

func (m *Creature) GetVitalityRegen() int32 {
	if m != nil {
		return m.VitalityRegen
	}
	return 0
}

func (m *Creature) GetIntelligence() int32 {
	if m != nil {
		return m.Intelligence
	}
	return 0
}

func (m *Creature) GetFocus() int32 {
	if m != nil {
		return m.Focus
	}
	return 0
}

func (m *Creature) GetWillpower() int32 {
	if m != nil {
		return m.Willpower
	}
	return 0
}

func (m *Creature) GetFocusRegen() int32 {
	if m != nil {
		return m.FocusRegen
	}
	return 0
}

func (m *Creature) GetAgility() int32 {
	if m != nil {
		return m.Agility
	}
	return 0
}

func (m *Creature) GetEvasion() int32 {
	if m != nil {
		return m.Evasion
	}
	return 0
}

func (m *Creature) GetAccuracy() int32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Creature) GetInitiative() int32 {
	if m != nil {
		return m.Initiative
	}
	return 0
}

func (m *Creature) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *Creature) GetXp() int64 {
	if m != nil {
		return m.Xp
	}
	return 0
}

// Player represents a user or AI controlled character
type Player struct {
	// Base is the basic stats of the player
	Base *Creature `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Character is what class the player is playing as (or if they're the status screen or an audience member)
	Character *Class `protobuf:"bytes,2,opt,name=character,proto3" json:"character,omitempty"`
	// IsAI is true if this player is currently controlled by an AI
	IsAi bool `protobuf:"varint,3,opt,name=is_ai,json=isAi,proto3" json:"is_ai,omitempty"`
	// Level is their current character level, starts at 1
	Level int32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// Skills is a map of ID to skill
	Skills map[string]*Skill `protobuf:"bytes,5,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Inventory is a map of ID to items currently held by this player
	Inventory            map[string]*Item `protobuf:"bytes,6,rep,name=inventory,proto3" json:"inventory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{3}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetBase() *Creature {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Player) GetCharacter() *Class {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *Player) GetIsAi() bool {
	if m != nil {
		return m.IsAi
	}
	return false
}

func (m *Player) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Player) GetSkills() map[string]*Skill {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *Player) GetInventory() map[string]*Item {
	if m != nil {
		return m.Inventory
	}
	return nil
}

// Monster represents an enemy the characters are fighting
type Monster struct {
	Base                 *Creature `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Type                 Type      `protobuf:"varint,3,opt,name=type,proto3,enum=endless.stream.v1.Type" json:"type,omitempty"`
	IsFlying             bool      `protobuf:"varint,4,opt,name=is_flying,json=isFlying,proto3" json:"is_flying,omitempty"`
	IsBoss               bool      `protobuf:"varint,5,opt,name=is_boss,json=isBoss,proto3" json:"is_boss,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Monster) Reset()         { *m = Monster{} }
func (m *Monster) String() string { return proto.CompactTextString(m) }
func (*Monster) ProtoMessage()    {}
func (*Monster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{4}
}

func (m *Monster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monster.Unmarshal(m, b)
}
func (m *Monster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monster.Marshal(b, m, deterministic)
}
func (m *Monster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monster.Merge(m, src)
}
func (m *Monster) XXX_Size() int {
	return xxx_messageInfo_Monster.Size(m)
}
func (m *Monster) XXX_DiscardUnknown() {
	xxx_messageInfo_Monster.DiscardUnknown(m)
}

var xxx_messageInfo_Monster proto.InternalMessageInfo

func (m *Monster) GetBase() *Creature {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Monster) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_None
}

func (m *Monster) GetIsFlying() bool {
	if m != nil {
		return m.IsFlying
	}
	return false
}

func (m *Monster) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

// EventMessage is used when the game needs to display a message in the UI
type EventMessage struct {
	// MsgId is the id of the message
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// Msg contains the message content
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// IsError is true if the message is about an error that has occured
	IsError bool `protobuf:"varint,3,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	// IsAlert is true if the message is an alert, and only has an "Ok" button.
	// False means it's a confirmation, which has an "Yes" & "No" button
	IsAlert bool `protobuf:"varint,4,opt,name=is_alert,json=isAlert,proto3" json:"is_alert,omitempty"`
	// PlayerId is set only if the message is for a specific player.
	PlayerId *wrappers.StringValue `protobuf:"bytes,5,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// LogOnly is a boolean that if true, messages go into the player log without
	// getting any kind of notification
	LogOnly              bool     `protobuf:"varint,6,opt,name=log_only,json=logOnly,proto3" json:"log_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventMessage) Reset()         { *m = EventMessage{} }
func (m *EventMessage) String() string { return proto.CompactTextString(m) }
func (*EventMessage) ProtoMessage()    {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{5}
}

func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventMessage.Unmarshal(m, b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return xxx_messageInfo_EventMessage.Size(m)
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

func (m *EventMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *EventMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EventMessage) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *EventMessage) GetIsAlert() bool {
	if m != nil {
		return m.IsAlert
	}
	return false
}

func (m *EventMessage) GetPlayerId() *wrappers.StringValue {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *EventMessage) GetLogOnly() bool {
	if m != nil {
		return m.LogOnly
	}
	return false
}

// CharacterSelected is sent by the game when someone selects a character
// on the character selection screen. This is used to disable that character in the UI
// so nobody else can select it.
type CharacterSelected struct {
	// Selected is a map of ID -> class
	Selected             map[string]ClassType `protobuf:"bytes,1,rep,name=selected,proto3" json:"selected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=endless.stream.v1.ClassType"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CharacterSelected) Reset()         { *m = CharacterSelected{} }
func (m *CharacterSelected) String() string { return proto.CompactTextString(m) }
func (*CharacterSelected) ProtoMessage()    {}
func (*CharacterSelected) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{6}
}

func (m *CharacterSelected) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CharacterSelected.Unmarshal(m, b)
}
func (m *CharacterSelected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CharacterSelected.Marshal(b, m, deterministic)
}
func (m *CharacterSelected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CharacterSelected.Merge(m, src)
}
func (m *CharacterSelected) XXX_Size() int {
	return xxx_messageInfo_CharacterSelected.Size(m)
}
func (m *CharacterSelected) XXX_DiscardUnknown() {
	xxx_messageInfo_CharacterSelected.DiscardUnknown(m)
}

var xxx_messageInfo_CharacterSelected proto.InternalMessageInfo

func (m *CharacterSelected) GetSelected() map[string]ClassType {
	if m != nil {
		return m.Selected
	}
	return nil
}

// Wave has some basic information about the wave
type Wave struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HasBoss              bool     `protobuf:"varint,2,opt,name=has_boss,json=hasBoss,proto3" json:"has_boss,omitempty"`
	Level                Level    `protobuf:"varint,3,opt,name=level,proto3,enum=endless.stream.v1.Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wave) Reset()         { *m = Wave{} }
func (m *Wave) String() string { return proto.CompactTextString(m) }
func (*Wave) ProtoMessage()    {}
func (*Wave) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{7}
}

func (m *Wave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wave.Unmarshal(m, b)
}
func (m *Wave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wave.Marshal(b, m, deterministic)
}
func (m *Wave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wave.Merge(m, src)
}
func (m *Wave) XXX_Size() int {
	return xxx_messageInfo_Wave.Size(m)
}
func (m *Wave) XXX_DiscardUnknown() {
	xxx_messageInfo_Wave.DiscardUnknown(m)
}

var xxx_messageInfo_Wave proto.InternalMessageInfo

func (m *Wave) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Wave) GetHasBoss() bool {
	if m != nil {
		return m.HasBoss
	}
	return false
}

func (m *Wave) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_Blank
}

// CurrentState is sent after something has happened to change the state.
type CurrentState struct {
	// Monsters holds an array of the monsters in the current wave
	Monsters []*Monster `protobuf:"bytes,1,rep,name=monsters,proto3" json:"monsters,omitempty"`
	// Players contains a list of id->Player of who's in the game currently
	Players map[string]*Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// CurrentPlayer is the UUID of the player whose turn it is currently.
	// If it is null, it is currently a monster's turn or the players aren't in battle ( ie, in the store or all dead ).
	CurrentPlayer *wrappers.StringValue `protobuf:"bytes,3,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`
	// Display indicates what screen the game is on currently. Clients don't have to care about all of these.
	// For example, the player display screen doesn't care about the NewWave display.
	Display Display `protobuf:"varint,4,opt,name=display,proto3,enum=endless.stream.v1.Display" json:"display,omitempty"`
	// CurrentWave is used to indicate what the current wave is
	CurrentWave *Wave `protobuf:"bytes,5,opt,name=current_wave,json=currentWave,proto3" json:"current_wave,omitempty"`
	// UpcomingWaves is used to show an "upcoming waves" tracker on the shared info screen
	UpcomingWaves map[int32]*Wave `protobuf:"bytes,6,rep,name=upcoming_waves,json=upcomingWaves,proto3" json:"upcoming_waves,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AudienceCount is how many folks are in the active audience ( connected to the current game
	// as an audience member )
	AudienceCount        int64    `protobuf:"varint,7,opt,name=audience_count,json=audienceCount,proto3" json:"audience_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentState) Reset()         { *m = CurrentState{} }
func (m *CurrentState) String() string { return proto.CompactTextString(m) }
func (*CurrentState) ProtoMessage()    {}
func (*CurrentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{8}
}

func (m *CurrentState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentState.Unmarshal(m, b)
}
func (m *CurrentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentState.Marshal(b, m, deterministic)
}
func (m *CurrentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentState.Merge(m, src)
}
func (m *CurrentState) XXX_Size() int {
	return xxx_messageInfo_CurrentState.Size(m)
}
func (m *CurrentState) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentState.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentState proto.InternalMessageInfo

func (m *CurrentState) GetMonsters() []*Monster {
	if m != nil {
		return m.Monsters
	}
	return nil
}

func (m *CurrentState) GetPlayers() map[string]*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CurrentState) GetCurrentPlayer() *wrappers.StringValue {
	if m != nil {
		return m.CurrentPlayer
	}
	return nil
}

func (m *CurrentState) GetDisplay() Display {
	if m != nil {
		return m.Display
	}
	return Display_ScreenLoading
}

func (m *CurrentState) GetCurrentWave() *Wave {
	if m != nil {
		return m.CurrentWave
	}
	return nil
}

func (m *CurrentState) GetUpcomingWaves() map[int32]*Wave {
	if m != nil {
		return m.UpcomingWaves
	}
	return nil
}

func (m *CurrentState) GetAudienceCount() int64 {
	if m != nil {
		return m.AudienceCount
	}
	return 0
}

// Tick is a message that's sent out on a set schedule
// that informs things like countdown timers and whatnot
type Tick struct {
	// Time is just so that the game clients can ignore ticks from too far in the past
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Progress is null if there is no progress bar, but if it's present it counts from 100 down to 0
	// so that the clients know that there is a countdown in progress ( such as the game saying that
	// it's about to make a descision for a player in battle, or that the store is about to go away, etc)
	Progress             *wrappers.Int32Value `protobuf:"bytes,2,opt,name=progress,proto3" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tick) Reset()         { *m = Tick{} }
func (m *Tick) String() string { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()    {}
func (*Tick) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{9}
}

func (m *Tick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tick.Unmarshal(m, b)
}
func (m *Tick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tick.Marshal(b, m, deterministic)
}
func (m *Tick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tick.Merge(m, src)
}
func (m *Tick) XXX_Size() int {
	return xxx_messageInfo_Tick.Size(m)
}
func (m *Tick) XXX_DiscardUnknown() {
	xxx_messageInfo_Tick.DiscardUnknown(m)
}

var xxx_messageInfo_Tick proto.InternalMessageInfo

func (m *Tick) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Tick) GetProgress() *wrappers.Int32Value {
	if m != nil {
		return m.Progress
	}
	return nil
}

type JoinedGame struct {
	// Id is the UUID of the player
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// AsAudience lets the client know if the player has joined as one of the four main or if they
	// have joined as part of the audience
	AsAudience bool `protobuf:"varint,2,opt,name=as_audience,json=asAudience,proto3" json:"as_audience,omitempty"`
	// IsVIP is to indicate if the player is "player 1", ie, they're the player
	// that gets to make decisions like when to start the game
	IsVip bool `protobuf:"varint,3,opt,name=is_vip,json=isVip,proto3" json:"is_vip,omitempty"`
	// Name is the name of the player
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinedGame) Reset()         { *m = JoinedGame{} }
func (m *JoinedGame) String() string { return proto.CompactTextString(m) }
func (*JoinedGame) ProtoMessage()    {}
func (*JoinedGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{10}
}

func (m *JoinedGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinedGame.Unmarshal(m, b)
}
func (m *JoinedGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinedGame.Marshal(b, m, deterministic)
}
func (m *JoinedGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinedGame.Merge(m, src)
}
func (m *JoinedGame) XXX_Size() int {
	return xxx_messageInfo_JoinedGame.Size(m)
}
func (m *JoinedGame) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinedGame.DiscardUnknown(m)
}

var xxx_messageInfo_JoinedGame proto.InternalMessageInfo

func (m *JoinedGame) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinedGame) GetAsAudience() bool {
	if m != nil {
		return m.AsAudience
	}
	return false
}

func (m *JoinedGame) GetIsVip() bool {
	if m != nil {
		return m.IsVip
	}
	return false
}

func (m *JoinedGame) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Action is sent when an actor in the game does something ( attacks a target, uses a skill, etc ),
// that requires the UI ( player or status ) to display something.
type Action struct {
	// Id is a UUID, and should be used in the ActionComplete message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ActorId is the UUID of the actor performing the action
	ActorId string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// TargetIds is the UUID of the target of the action. It may be empty if the action
	// has no target ( ie, a move action ).
	TargetIds []string `protobuf:"bytes,3,rep,name=target_ids,json=targetIds,proto3" json:"target_ids,omitempty"`
	// Msg is a human readable message of what the action is, such as "Bob hits the Kobold with Divine Strike
	// for 10 points of damage"
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	// Skill is the skill used
	Skill *Skill `protobuf:"bytes,6,opt,name=skill,proto3" json:"skill,omitempty"`
	// Value is the amount of damage ( or healing ) done by the skill
	Value                int32    `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{11}
}

func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Action) GetActorId() string {
	if m != nil {
		return m.ActorId
	}
	return ""
}

func (m *Action) GetTargetIds() []string {
	if m != nil {
		return m.TargetIds
	}
	return nil
}

func (m *Action) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Action) GetSkill() *Skill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *Action) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Sent when the players enter the store, contains the inventory & prices of
// what's in the store
type StoreInventory struct {
	// Inventory is a map of UUID -> Item of what's in the store
	Inventory map[string]*Item `protobuf:"bytes,1,rep,name=inventory,proto3" json:"inventory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Prices is a map of UUID -> price of what's in the store
	Prices               map[string]int32 `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StoreInventory) Reset()         { *m = StoreInventory{} }
func (m *StoreInventory) String() string { return proto.CompactTextString(m) }
func (*StoreInventory) ProtoMessage()    {}
func (*StoreInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{12}
}

func (m *StoreInventory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreInventory.Unmarshal(m, b)
}
func (m *StoreInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreInventory.Marshal(b, m, deterministic)
}
func (m *StoreInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInventory.Merge(m, src)
}
func (m *StoreInventory) XXX_Size() int {
	return xxx_messageInfo_StoreInventory.Size(m)
}
func (m *StoreInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInventory.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInventory proto.InternalMessageInfo

func (m *StoreInventory) GetInventory() map[string]*Item {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *StoreInventory) GetPrices() map[string]int32 {
	if m != nil {
		return m.Prices
	}
	return nil
}

// Output is sent by the game server to update clients on various parts of the game
type Output struct {
	// Types that are valid to be assigned to Data:
	//	*Output_State
	//	*Output_Joined
	//	*Output_Tick
	//	*Output_Msg
	//	*Output_Action
	//	*Output_Selected
	//	*Output_StoreInventory
	Data                 isOutput_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2b3ae2e703b013, []int{13}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

type isOutput_Data interface {
	isOutput_Data()
}

type Output_State struct {
	State *CurrentState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type Output_Joined struct {
	Joined *JoinedGame `protobuf:"bytes,2,opt,name=joined,proto3,oneof"`
}

type Output_Tick struct {
	Tick *Tick `protobuf:"bytes,3,opt,name=tick,proto3,oneof"`
}

type Output_Msg struct {
	Msg *EventMessage `protobuf:"bytes,4,opt,name=msg,proto3,oneof"`
}

type Output_Action struct {
	Action *Action `protobuf:"bytes,5,opt,name=action,proto3,oneof"`
}

type Output_Selected struct {
	Selected *CharacterSelected `protobuf:"bytes,6,opt,name=selected,proto3,oneof"`
}

type Output_StoreInventory struct {
	StoreInventory *StoreInventory `protobuf:"bytes,7,opt,name=store_inventory,json=storeInventory,proto3,oneof"`
}

func (*Output_State) isOutput_Data() {}

func (*Output_Joined) isOutput_Data() {}

func (*Output_Tick) isOutput_Data() {}

func (*Output_Msg) isOutput_Data() {}

func (*Output_Action) isOutput_Data() {}

func (*Output_Selected) isOutput_Data() {}

func (*Output_StoreInventory) isOutput_Data() {}

func (m *Output) GetData() isOutput_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Output) GetState() *CurrentState {
	if x, ok := m.GetData().(*Output_State); ok {
		return x.State
	}
	return nil
}

func (m *Output) GetJoined() *JoinedGame {
	if x, ok := m.GetData().(*Output_Joined); ok {
		return x.Joined
	}
	return nil
}

func (m *Output) GetTick() *Tick {
	if x, ok := m.GetData().(*Output_Tick); ok {
		return x.Tick
	}
	return nil
}

func (m *Output) GetMsg() *EventMessage {
	if x, ok := m.GetData().(*Output_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *Output) GetAction() *Action {
	if x, ok := m.GetData().(*Output_Action); ok {
		return x.Action
	}
	return nil
}

func (m *Output) GetSelected() *CharacterSelected {
	if x, ok := m.GetData().(*Output_Selected); ok {
		return x.Selected
	}
	return nil
}

func (m *Output) GetStoreInventory() *StoreInventory {
	if x, ok := m.GetData().(*Output_StoreInventory); ok {
		return x.StoreInventory
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Output) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Output_State)(nil),
		(*Output_Joined)(nil),
		(*Output_Tick)(nil),
		(*Output_Msg)(nil),
		(*Output_Action)(nil),
		(*Output_Selected)(nil),
		(*Output_StoreInventory)(nil),
	}
}

func init() {
	proto.RegisterEnum("endless.stream.v1.Target", Target_name, Target_value)
	proto.RegisterEnum("endless.stream.v1.Position", Position_name, Position_value)
	proto.RegisterType((*Skill)(nil), "endless.stream.v1.Skill")
	proto.RegisterType((*Item)(nil), "endless.stream.v1.Item")
	proto.RegisterMapType((map[string]int32)(nil), "endless.stream.v1.Item.BonusEntry")
	proto.RegisterType((*Creature)(nil), "endless.stream.v1.Creature")
	proto.RegisterType((*Player)(nil), "endless.stream.v1.Player")
	proto.RegisterMapType((map[string]*Item)(nil), "endless.stream.v1.Player.InventoryEntry")
	proto.RegisterMapType((map[string]*Skill)(nil), "endless.stream.v1.Player.SkillsEntry")
	proto.RegisterType((*Monster)(nil), "endless.stream.v1.Monster")
	proto.RegisterType((*EventMessage)(nil), "endless.stream.v1.EventMessage")
	proto.RegisterType((*CharacterSelected)(nil), "endless.stream.v1.CharacterSelected")
	proto.RegisterMapType((map[string]ClassType)(nil), "endless.stream.v1.CharacterSelected.SelectedEntry")
	proto.RegisterType((*Wave)(nil), "endless.stream.v1.Wave")
	proto.RegisterType((*CurrentState)(nil), "endless.stream.v1.CurrentState")
	proto.RegisterMapType((map[string]*Player)(nil), "endless.stream.v1.CurrentState.PlayersEntry")
	proto.RegisterMapType((map[int32]*Wave)(nil), "endless.stream.v1.CurrentState.UpcomingWavesEntry")
	proto.RegisterType((*Tick)(nil), "endless.stream.v1.Tick")
	proto.RegisterType((*JoinedGame)(nil), "endless.stream.v1.JoinedGame")
	proto.RegisterType((*Action)(nil), "endless.stream.v1.Action")
	proto.RegisterType((*StoreInventory)(nil), "endless.stream.v1.StoreInventory")
	proto.RegisterMapType((map[string]*Item)(nil), "endless.stream.v1.StoreInventory.InventoryEntry")
	proto.RegisterMapType((map[string]int32)(nil), "endless.stream.v1.StoreInventory.PricesEntry")
	proto.RegisterType((*Output)(nil), "endless.stream.v1.Output")
}

func init() { proto.RegisterFile("output.proto", fileDescriptor_0b2b3ae2e703b013) }

var fileDescriptor_0b2b3ae2e703b013 = []byte{
	// 1729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0xb6, 0x24, 0x92, 0xa2, 0x8e, 0x6c, 0xd5, 0x3b, 0xdd, 0xdd, 0x30, 0xda, 0x6c, 0xec, 0x55,
	0xbb, 0x80, 0x9b, 0x6c, 0xe4, 0xae, 0xdc, 0x36, 0xd9, 0x2d, 0x7a, 0x61, 0x7b, 0x9d, 0xda, 0x45,
	0xb2, 0x09, 0xe8, 0x24, 0x45, 0x7a, 0x43, 0x8c, 0xc8, 0x11, 0x35, 0x35, 0xc5, 0x21, 0x38, 0x43,
	0xd9, 0x7a, 0x98, 0x5e, 0xf5, 0xae, 0x40, 0x1f, 0xa0, 0x28, 0xd0, 0x9b, 0x3e, 0x40, 0x5f, 0xa4,
	0x2f, 0xd0, 0xbb, 0x62, 0x7e, 0x68, 0xd2, 0x0e, 0x5d, 0xbb, 0x05, 0x7a, 0x37, 0x73, 0xe6, 0x3b,
	0x67, 0x86, 0x67, 0xbe, 0xf9, 0xce, 0x21, 0xac, 0xb3, 0x42, 0x64, 0x85, 0x18, 0x67, 0x39, 0x13,
	0x0c, 0x7d, 0x44, 0xd2, 0x28, 0x21, 0x9c, 0x8f, 0xb9, 0xc8, 0x09, 0x5e, 0x8c, 0x97, 0x5f, 0x0f,
	0x1f, 0xc6, 0x8c, 0xc5, 0x09, 0xd9, 0x55, 0x80, 0x69, 0x31, 0xdb, 0x3d, 0xcf, 0x71, 0x96, 0x91,
	0x9c, 0x6b, 0x97, 0xe1, 0xd6, 0xf5, 0x75, 0x41, 0x17, 0x84, 0x0b, 0xbc, 0xc8, 0x0c, 0x00, 0x0a,
	0x41, 0x13, 0x3d, 0x1e, 0xfd, 0xb1, 0x0d, 0xf6, 0xe9, 0x19, 0x4d, 0x12, 0x34, 0x80, 0x36, 0x8d,
	0xbc, 0xd6, 0x76, 0x6b, 0xa7, 0xe7, 0xb7, 0x69, 0x84, 0x10, 0x58, 0x29, 0x5e, 0x10, 0xaf, 0xad,
	0x2c, 0x6a, 0x8c, 0x3e, 0x06, 0x3b, 0x21, 0x4b, 0x92, 0x78, 0x9d, 0xed, 0xd6, 0x8e, 0xed, 0xeb,
	0x09, 0xfa, 0x1a, 0x1c, 0x81, 0xf3, 0x98, 0x08, 0xcf, 0xda, 0x6e, 0xed, 0x0c, 0x26, 0xf7, 0xc7,
	0x1f, 0x1c, 0x7a, 0xfc, 0x46, 0x01, 0x7c, 0x03, 0x94, 0xc1, 0x43, 0xc6, 0x85, 0x67, 0xab, 0x38,
	0x6a, 0x8c, 0x86, 0xe0, 0x86, 0x8c, 0x25, 0x11, 0x3b, 0x4f, 0x3d, 0x47, 0xd9, 0x2f, 0xe7, 0xe8,
	0x47, 0xb0, 0x51, 0x8e, 0x83, 0x84, 0xcc, 0x84, 0xd7, 0x55, 0x80, 0xf5, 0xd2, 0xf8, 0x82, 0xcc,
	0x04, 0xfa, 0x14, 0x1c, 0x1c, 0x0a, 0xba, 0x24, 0x9e, 0xbb, 0xdd, 0xda, 0x71, 0x7d, 0x33, 0x43,
	0x0f, 0x01, 0x8a, 0x2c, 0xce, 0x71, 0x84, 0xa7, 0x09, 0xf1, 0x7a, 0x6a, 0xad, 0x66, 0x41, 0xdb,
	0xd0, 0x8f, 0x08, 0x0f, 0x73, 0x9a, 0x09, 0xca, 0x52, 0x6f, 0xa2, 0x3e, 0xb8, 0x6e, 0x1a, 0xfd,
	0xb5, 0x0d, 0xd6, 0x89, 0x20, 0x8b, 0x3b, 0x25, 0xa9, 0x4a, 0x47, 0xe7, 0xae, 0xe9, 0xf0, 0xa0,
	0x9b, 0x61, 0xce, 0xe5, 0xd1, 0x2d, 0x75, 0xbc, 0x72, 0x8a, 0x9e, 0x81, 0x3d, 0x65, 0x69, 0xc1,
	0x3d, 0x67, 0xbb, 0xb3, 0xd3, 0x9f, 0x8c, 0x1a, 0x62, 0xc9, 0x83, 0x8d, 0x0f, 0x24, 0xe8, 0x28,
	0x15, 0xf9, 0xca, 0xd7, 0x0e, 0xf2, 0xae, 0x42, 0x56, 0xa4, 0x65, 0xaa, 0xf4, 0xe4, 0xc6, 0x1c,
	0xdd, 0x9a, 0x83, 0xe1, 0x33, 0x80, 0x6a, 0x13, 0xb4, 0x09, 0x9d, 0x33, 0xb2, 0x32, 0x99, 0x90,
	0x43, 0xb9, 0xdf, 0x12, 0x27, 0x85, 0xce, 0x85, 0xed, 0xeb, 0xc9, 0xb7, 0xed, 0x67, 0xad, 0xd1,
	0x3f, 0x2d, 0x70, 0x0f, 0x73, 0x82, 0x45, 0x91, 0x93, 0x3b, 0x65, 0xf0, 0x13, 0x70, 0x16, 0xf8,
	0x22, 0x98, 0x67, 0x25, 0xcf, 0x16, 0xf8, 0xe2, 0x38, 0x93, 0xe6, 0xb0, 0xc8, 0xa5, 0xd9, 0x32,
	0x9f, 0x54, 0xe4, 0xc7, 0x19, 0x7a, 0x0a, 0x6e, 0xc6, 0x38, 0x55, 0xe7, 0xb6, 0x55, 0xc6, 0x3f,
	0x6b, 0xc8, 0xd2, 0x6b, 0x03, 0xf1, 0x2f, 0xc1, 0xe8, 0x97, 0xe0, 0x72, 0x81, 0x45, 0xc1, 0x89,
	0x4e, 0xef, 0x60, 0xb2, 0xd5, 0xe0, 0x78, 0xaa, 0x20, 0x47, 0xb3, 0x19, 0x09, 0x85, 0x7f, 0xe9,
	0x20, 0xd9, 0x2a, 0x31, 0x69, 0x2c, 0xe6, 0xde, 0xc7, 0x9a, 0xad, 0xe5, 0x5c, 0xae, 0x2d, 0xa9,
	0xc0, 0x09, 0x15, 0x2b, 0xef, 0x13, 0xbd, 0x56, 0xce, 0xd1, 0x57, 0x80, 0x42, 0xb6, 0x98, 0x62,
	0x11, 0x44, 0x78, 0x81, 0x63, 0x12, 0x4c, 0x31, 0x27, 0xde, 0xa7, 0x0a, 0xb5, 0xa9, 0x57, 0xbe,
	0x53, 0x0b, 0x07, 0x98, 0x13, 0xf4, 0x25, 0x0c, 0x4a, 0xcf, 0x20, 0x27, 0x31, 0x49, 0xbd, 0x7b,
	0x0a, 0xb9, 0x51, 0x5a, 0x7d, 0x69, 0x44, 0x23, 0x58, 0xa7, 0xa9, 0x20, 0x49, 0x42, 0x63, 0x92,
	0x86, 0xc4, 0x7b, 0xa8, 0x5f, 0x47, 0xdd, 0x26, 0xef, 0x67, 0xc6, 0xc2, 0x82, 0x7b, 0x5b, 0x3a,
	0x79, 0x6a, 0x82, 0x1e, 0x40, 0xef, 0x9c, 0x26, 0x49, 0xc6, 0xce, 0x49, 0xee, 0x6d, 0xab, 0x95,
	0xca, 0x80, 0xb6, 0xa0, 0xaf, 0x60, 0x66, 0xef, 0x2f, 0xd4, 0x3a, 0x28, 0x93, 0xde, 0xd8, 0x83,
	0x2e, 0x8e, 0xa9, 0xfa, 0xd0, 0x1d, 0xb5, 0x58, 0x4e, 0xe5, 0x0a, 0x59, 0x62, 0x2e, 0x2f, 0xe5,
	0x27, 0x7a, 0xc5, 0x4c, 0x65, 0x76, 0x70, 0x18, 0x16, 0x39, 0x0e, 0x57, 0xde, 0x23, 0x9d, 0x9d,
	0x72, 0x2e, 0x9f, 0x2a, 0x4d, 0xa9, 0xa0, 0x58, 0x51, 0xf4, 0xb1, 0xde, 0xaf, 0xb2, 0x48, 0xb6,
	0xc4, 0x2c, 0x89, 0x14, 0x3f, 0x3b, 0xbe, 0x1a, 0x4b, 0x46, 0x5d, 0x64, 0xde, 0x9e, 0xb2, 0xb4,
	0x2f, 0xb2, 0xd1, 0x3f, 0x3a, 0xe0, 0xbc, 0x4e, 0xf0, 0x8a, 0xe4, 0x68, 0x17, 0x2c, 0x95, 0x5e,
	0x49, 0xb7, 0x7e, 0x23, 0x2d, 0x4a, 0x5e, 0xfa, 0x0a, 0x88, 0x7e, 0x01, 0xbd, 0x70, 0x8e, 0x73,
	0x1c, 0x0a, 0x92, 0x2b, 0x4a, 0xf6, 0x27, 0x5e, 0x93, 0x57, 0x82, 0x39, 0xf7, 0x2b, 0x28, 0xfa,
	0x21, 0xd8, 0x94, 0x07, 0x98, 0x2a, 0xc2, 0xba, 0xbe, 0x45, 0xf9, 0x3e, 0xad, 0xd4, 0xd2, 0xaa,
	0xab, 0xe5, 0xaf, 0xc0, 0xe1, 0x52, 0x70, 0xb9, 0x67, 0xab, 0x27, 0xfd, 0x65, 0x13, 0x59, 0xd5,
	0xf1, 0xc7, 0x4a, 0x98, 0xcd, 0xab, 0x36, 0x4e, 0xe8, 0x39, 0xf4, 0x68, 0xba, 0x24, 0xa9, 0x60,
	0xf9, 0xca, 0x88, 0xc2, 0xce, 0xcd, 0x11, 0x4e, 0x4a, 0xa8, 0x0e, 0x52, 0xb9, 0x0e, 0x4f, 0xa1,
	0x5f, 0x0b, 0xdf, 0xf0, 0x9e, 0xc7, 0xf5, 0xf7, 0xdc, 0x9c, 0x06, 0x15, 0xa0, 0xf6, 0xd2, 0x87,
	0x6f, 0x61, 0x70, 0x75, 0xc7, 0x86, 0xb8, 0x4f, 0xae, 0xc6, 0xbd, 0x77, 0x83, 0xa2, 0xd5, 0x05,
	0xe4, 0x0f, 0x2d, 0xe8, 0xbe, 0x64, 0x29, 0x17, 0xff, 0xcb, 0x95, 0x3e, 0x06, 0x4b, 0xac, 0x32,
	0x62, 0xc4, 0xb8, 0x69, 0xbb, 0x37, 0xab, 0x8c, 0xf8, 0x0a, 0x84, 0x3e, 0x83, 0x1e, 0xe5, 0xc1,
	0x2c, 0x59, 0xd1, 0x34, 0x36, 0x52, 0xec, 0x52, 0xfe, 0x5c, 0xcd, 0xd1, 0x3d, 0xe8, 0x52, 0x1e,
	0x4c, 0x19, 0xe7, 0x4a, 0x67, 0x5c, 0xdf, 0xa1, 0xfc, 0x80, 0x71, 0x3e, 0xfa, 0x7b, 0x0b, 0xd6,
	0x8f, 0xe4, 0x67, 0xbf, 0x24, 0x9c, 0xe3, 0x58, 0x0b, 0x18, 0x8f, 0x03, 0x23, 0x74, 0x52, 0xc0,
	0x78, 0x7c, 0x12, 0xc9, 0x64, 0x2c, 0x78, 0x6c, 0xa4, 0x4e, 0x0e, 0xd1, 0x7d, 0x70, 0x29, 0x0f,
	0x48, 0x9e, 0xb3, 0xdc, 0x50, 0xa7, 0x4b, 0xf9, 0x91, 0x9c, 0x9a, 0x25, 0x9c, 0x90, 0x5c, 0x94,
	0x45, 0x81, 0xf2, 0x7d, 0x39, 0x45, 0xdf, 0x40, 0x2f, 0x53, 0xf7, 0x2b, 0x77, 0xb0, 0x55, 0x22,
	0x1e, 0x8c, 0x75, 0xd5, 0x1f, 0x97, 0x55, 0x7f, 0x7c, 0x2a, 0x72, 0x9a, 0xc6, 0xef, 0x64, 0x12,
	0x7d, 0x57, 0xc3, 0x4f, 0x22, 0x19, 0x35, 0x61, 0x71, 0xc0, 0xd2, 0x64, 0xa5, 0x8a, 0xac, 0xeb,
	0x77, 0x13, 0x16, 0xbf, 0x4a, 0x93, 0xd5, 0xe8, 0x6f, 0x2d, 0xf8, 0xe8, 0xb0, 0x64, 0xf4, 0x29,
	0x49, 0x48, 0x28, 0x48, 0x84, 0xbe, 0x07, 0x97, 0x9b, 0xb1, 0xd7, 0x52, 0x74, 0x9b, 0x34, 0xe5,
	0xfc, 0xba, 0xdf, 0xb8, 0x1c, 0x68, 0xe2, 0x5d, 0xc6, 0x18, 0xbe, 0x87, 0x8d, 0x2b, 0x4b, 0x0d,
	0x0c, 0x99, 0xd4, 0x19, 0x32, 0x98, 0x3c, 0xb8, 0xe9, 0x01, 0xaa, 0x7b, 0xab, 0xd1, 0x24, 0x04,
	0xeb, 0xb7, 0x78, 0x49, 0x64, 0xc4, 0xb4, 0x58, 0x98, 0xd4, 0xcb, 0xa1, 0xfc, 0xea, 0x39, 0x36,
	0x57, 0xd7, 0xd6, 0x5f, 0x3d, 0xc7, 0xea, 0xee, 0x24, 0xcd, 0xab, 0x96, 0x66, 0xd0, 0x48, 0xf3,
	0x17, 0x72, 0xdd, 0x3c, 0xdf, 0xd1, 0xbf, 0x2c, 0x58, 0x3f, 0x2c, 0xf2, 0x9c, 0xa4, 0x42, 0x56,
	0x06, 0x29, 0x19, 0xee, 0x42, 0x73, 0x93, 0x9b, 0x04, 0x0d, 0x1b, 0x62, 0x18, 0xfa, 0xfa, 0x97,
	0x58, 0xf4, 0x1c, 0xba, 0xfa, 0x56, 0xe4, 0x91, 0xa4, 0xdb, 0x57, 0x4d, 0xdf, 0x59, 0xdb, 0xc9,
	0xbc, 0x69, 0xa3, 0x07, 0xa5, 0x33, 0x3a, 0x84, 0x41, 0xa8, 0x51, 0x81, 0x36, 0xa9, 0x2f, 0xb9,
	0x8d, 0x11, 0x1b, 0xc6, 0xc7, 0x08, 0xe5, 0xcf, 0xa0, 0x1b, 0x51, 0x2e, 0xfd, 0x4d, 0x0f, 0xd7,
	0xf4, 0x0d, 0xdf, 0x69, 0x84, 0x5f, 0x42, 0xd1, 0xb7, 0xb0, 0x5e, 0x6e, 0x7d, 0x8e, 0x97, 0xc4,
	0x50, 0xb1, 0xe9, 0x89, 0xc9, 0x7b, 0xf1, 0xfb, 0x06, 0xac, 0x2e, 0xe9, 0x3d, 0x0c, 0x8a, 0x2c,
	0x64, 0x0b, 0x9a, 0xc6, 0xca, 0xb9, 0xec, 0x70, 0x26, 0xb7, 0x65, 0xe1, 0xad, 0xf1, 0x92, 0x51,
	0x4c, 0x2e, 0x36, 0x8a, 0xba, 0x4d, 0x16, 0x4d, 0x5c, 0x44, 0x54, 0x56, 0xbd, 0xa0, 0x6a, 0x81,
	0x3a, 0xfe, 0x46, 0x69, 0x3d, 0x94, 0xc6, 0xe1, 0x5b, 0x58, 0xaf, 0x67, 0xb4, 0x81, 0x88, 0xbb,
	0x57, 0xa5, 0xea, 0xfe, 0x8d, 0x3a, 0x5b, 0xd7, 0xc0, 0xf7, 0x80, 0x3e, 0x3c, 0x62, 0x3d, 0xb8,
	0x7d, 0x67, 0x1d, 0x54, 0x59, 0xab, 0x11, 0x9c, 0x81, 0xf5, 0x86, 0x86, 0x67, 0x68, 0x0c, 0x96,
	0xec, 0xe9, 0x8d, 0x06, 0x0e, 0x3f, 0xb8, 0xe8, 0x37, 0x65, 0xc3, 0xef, 0x2b, 0x9c, 0xea, 0x90,
	0x72, 0x16, 0xe7, 0xc4, 0xd0, 0x5f, 0xea, 0xe6, 0x75, 0x9f, 0x93, 0x54, 0xec, 0x4d, 0x4a, 0xb5,
	0x30, 0xe0, 0xd1, 0x1c, 0xe0, 0x37, 0x8c, 0xa6, 0x24, 0xfa, 0xb5, 0x6c, 0xcb, 0xae, 0xb7, 0x6e,
	0x5b, 0xd0, 0xc7, 0x3c, 0x28, 0x93, 0x6a, 0x1e, 0x16, 0x60, 0xbe, 0x6f, 0x2c, 0x52, 0x06, 0x29,
	0x0f, 0x96, 0x34, 0x33, 0xda, 0x66, 0x53, 0xfe, 0x8e, 0x66, 0x97, 0x2d, 0x9f, 0x55, 0xb5, 0x7c,
	0xa3, 0x3f, 0xb5, 0xc0, 0xd9, 0x0f, 0x55, 0x5b, 0x76, 0x7d, 0x9b, 0xfb, 0xb2, 0x5f, 0x10, 0x4c,
	0x89, 0x9d, 0x96, 0xce, 0xae, 0x9a, 0x9f, 0x44, 0xe8, 0x73, 0x00, 0xdd, 0x41, 0x07, 0x34, 0xe2,
	0x5e, 0x67, 0xbb, 0xb3, 0xd3, 0xf3, 0x7b, 0xda, 0x72, 0x12, 0xf1, 0x52, 0x6f, 0xad, 0x4a, 0x6f,
	0xc7, 0x60, 0xab, 0x3a, 0xaa, 0xb4, 0xef, 0x3f, 0x16, 0x35, 0x05, 0xab, 0x9a, 0xda, 0x6e, 0xad,
	0xa9, 0x1d, 0xfd, 0xa5, 0x0d, 0x83, 0x53, 0xc1, 0x72, 0x72, 0x59, 0xec, 0xd0, 0xf7, 0xf5, 0xb2,
	0xac, 0x65, 0xe0, 0xa7, 0x8d, 0xcd, 0x64, 0xdd, 0xeb, 0xe6, 0xf2, 0x8c, 0x8e, 0xc0, 0xc9, 0x72,
	0x1a, 0x92, 0x52, 0x1c, 0x9e, 0xdc, 0x1e, 0xec, 0xb5, 0xc2, 0x9b, 0x6e, 0x41, 0x3b, 0xff, 0x9f,
	0x0a, 0xf2, 0xf0, 0x1b, 0xe8, 0xd7, 0x76, 0xfb, 0xaf, 0x7e, 0x06, 0xfe, 0xdc, 0x01, 0xe7, 0x95,
	0xfa, 0xc3, 0x45, 0x4f, 0xc1, 0x96, 0xed, 0x74, 0xc9, 0xe3, 0xad, 0x5b, 0x5e, 0xfe, 0xf1, 0x9a,
	0xaf, 0xf1, 0xe8, 0x29, 0x38, 0xbf, 0x57, 0xb4, 0x34, 0x47, 0xfe, 0xbc, 0xc1, 0xb3, 0xe2, 0xed,
	0xf1, 0x9a, 0x6f, 0xe0, 0xe8, 0x89, 0x7c, 0x38, 0xe1, 0x99, 0x51, 0xc8, 0xc6, 0x5e, 0x80, 0x86,
	0x67, 0xc7, 0x6b, 0xbe, 0x82, 0xa1, 0xbd, 0x8a, 0x3f, 0xcd, 0xc7, 0xab, 0x17, 0xfd, 0xe3, 0x35,
	0x4d, 0xb1, 0x3d, 0xfd, 0x87, 0x65, 0x7e, 0x46, 0x9a, 0x55, 0x43, 0x33, 0x5d, 0x1e, 0x4c, 0x43,
	0xd1, 0x41, 0xad, 0xca, 0x6a, 0x6a, 0xfe, 0xf8, 0x2e, 0x55, 0xf6, 0x78, 0xad, 0xaa, 0xac, 0xe8,
	0x05, 0xfc, 0x80, 0x4b, 0x46, 0x04, 0x15, 0x11, 0xbb, 0x2a, 0xd4, 0x17, 0xb7, 0x72, 0xe7, 0x78,
	0xcd, 0x1f, 0xf0, 0x2b, 0x96, 0x03, 0x07, 0xac, 0x08, 0x0b, 0xfc, 0x68, 0x02, 0x8e, 0xfe, 0x59,
	0x45, 0x2e, 0x58, 0xa7, 0x24, 0x99, 0x6d, 0xae, 0xa1, 0x1e, 0xd8, 0x2f, 0x49, 0x42, 0xc8, 0x66,
	0x0b, 0x01, 0x38, 0x3e, 0x4e, 0x63, 0x12, 0x6d, 0xb6, 0x51, 0x17, 0x3a, 0xfb, 0xaf, 0x8e, 0x36,
	0x3b, 0x8f, 0x1e, 0x83, 0x5b, 0xfe, 0x6e, 0x49, 0x2f, 0xf9, 0x73, 0xbe, 0xb9, 0x26, 0xa1, 0x2f,
	0x69, 0x14, 0x25, 0xd2, 0xad, 0x07, 0xb6, 0x4f, 0xe3, 0xb9, 0xd8, 0x6c, 0x1f, 0xfc, 0xfc, 0x77,
	0x7b, 0x31, 0x15, 0xf3, 0x62, 0x3a, 0x0e, 0xd9, 0x62, 0x97, 0x13, 0x9c, 0xce, 0x71, 0x4c, 0xd2,
	0x5d, 0x73, 0xe6, 0x40, 0x9f, 0x79, 0x77, 0x8a, 0xc3, 0x33, 0x92, 0x46, 0xa5, 0x79, 0xea, 0x28,
	0xe5, 0xda, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xb9, 0x34, 0x31, 0x2f, 0x11, 0x00,
	0x00,
}
