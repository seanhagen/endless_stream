# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Run Tests & Scanners
on:
  push:
    branches:
      - 'main'
      - 'dev'
      - 'feat/*'
      - 'bugfix/*'
      - 'hotfix/*'
  pull_request:
    branches:
     - '*'
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  GO111MODULE: on

jobs:
  tests:
    name: "Download code & run tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      - name: Install go-enum
        run: 'mkdir -p ~/.local/bin && curl -fsSL "https://github.com/abice/go-enum/releases/download/v0.6.0/go-enum_Linux_x86_64" -o ~/.local/bin/go-enum'

      - name: Make go-enum executable
        run: chmod +x .local/bin//go-enum

      - uses: actions/setup-python@v5
        name: Setup Python

      - uses: pre-commit/action@v3.0.1
        name: Run pre-commit
        env:
          PATH: "$PATH:.local/bin"

      - name: Run Mage
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage

      - name: Test
        uses: robherley/go-test-action@v0

      - uses: actions/upload-artifact@v4
        with:
          name: go-test-coverage
          if-no-files-found: error
          retention-days: 7
          path: coverage.out

      - uses: actions/upload-artifact@v4
        with:
          name: go-test-coverage-txt
          if-no-files-found: error
          retention-days: 7
          path: coverage.txt

  code_coverage:
    name: "Generate code coverage report"
    if: github.event_name == 'pull_request'
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: fgrosse/go-coverage-report@v1.0.1 # Consider using a Git revision for maximum security
        with:
          coverage-artifact-name: "go-test-coverage"
          coverage-file-name: "coverage.out"

  dependency_checks:
    name: "Run dependency checks"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      - name: Run snapshot action
        uses: actions/go-dependency-submission@v2
        with:
            go-mod-path: go.mod

  static_checks:
    name: "Run static checks"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      - uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false

      # - name: Run go-mnd
      #   uses: tommy-muehle/go-mnd@master
      #   with:
      #     args: ./...

  vuln_checks:
    name: "Run vulnerability checks"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      - name: Scan for Vulnerabilities in Code
        uses: Templum/govulncheck-action@v1
        with:
          go-version: 1.22.0
          vulncheck-version: latest
          package: ./...
          fail-on-vuln: true

  security_checks:
    name: "Run security checks"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          repo-checkout: false
          check-latest: true
          go-version-file: go.mod
          go-package: ./...

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
