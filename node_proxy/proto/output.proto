syntax = "proto3";
package endless.stream.v1;
option go_package = "github.com/seanhagen/endless_stream/backend/endless";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "util.proto";

enum Target {
  // Self means the skill/item only affects the actor
  Self = 0;
  // Melee means the actor must be in the same threat zone for the skill/item to affect them
  Melee = 1;
  // Ranged means the actor can hit any other actor, regardless of positition
  Ranged = 2;
  // AOE means the skill/item affects all other actors in the chosen threat zone
  AOE = 3;
}

// Position describes where in the arena an actor is
enum Position {
  // Left is the player side
  Left = 0;
  // Middle is the center of the arena
  Middle = 1;
  // Right is the monster spawn side
  Right = 2;
}

// Skill represents a player skill that can be used during battle.
message Skill {
  // Id is the UUID of the skill
  string id = 1;
  // Name is the human-readable name of the skill
  string name = 2;
  // Level is the current level of the skill, starts at 0 for all
  int32 level = 3;
  // Target is for who/what the skill can target
  Target target = 4;
  // Cost is how much focus is required to activate the skill
  int32 cost = 5;
  // Cooldown is how many turns it takes for the skill to become usable again
  int32 cooldown = 6;
  // CooldownLeft is how many turns are left until the skill is usable again
  int32 cooldown_left = 7;
  // Active is true when the skill is usable. If the skill isn't unlocked, or a status
  // prevents the usage of the skill, this will be false.
  bool active = 8;
  // Upgradable is true while the skill is upgradable. Once a skill has reached max level
  // this becomes false.
  bool upgradable = 9;

  // Description is a human readable name for the skill.
  string description = 50;
}

// Item represents something the player can carry and use.
message Item {
  // Id is the UUID that represents the item
  string id = 1;
  // Name is the human-readable name of the item
  string name = 2;
  // Target is so the UI can show how many targets the item can affect
  Target target = 3;
  // Passive is if the item is passive/equipable
  bool passive = 4;

  // Bonus is a map of attribute name -> bonus that shows how the item affects
  // the player character ( ongoing for passive items, or immediate bonus otherwise)
  map<string,int32> bonus = 6;
  // Count is how many copies of this item the player has
  int32 count = 7;

  // Active is if the item is currently usable. Some items can be used at any time
  // (such as health potions), some are only usable on that players turn
  bool active = 8;

  // Description is the human readable description of what the item is
  // and what it does
  string description = 50;
}

// Creature is the base stats shared by characters and monsters
message Creature {
  // Id is the UUID for the creature
  string id = 1;
  // Name is the human readable name
  string name = 2;
  // MaxHp is the maximum amount of HP the creature can have
  int32 max_hp = 3;
  // CurHp is the current HP value
  int32 cur_hp = 4;

  // Position deetermines what threat zone the creature is currently standing in
  Position position = 5;

  // Statuses is a list of effects that currently affect this creature.
  repeated StatusEffect statuses = 6;

  int32 strength = 20;
  int32 vitality = 21;
  int32 combat_damage_base = 22;
  int32 vitality_regen = 23;

  int32 intelligence = 30;
  int32 focus = 31;
  int32 willpower = 32;
  int32 focus_regen = 33;

  int32 agility = 40;
  int32 evasion = 41;
  int32 accuracy = 42;
  int32 initiative = 43;

  int64 gold = 50;
  int64 xp = 51;
}

// Player represents a user or AI controlled character
message Player {
  // Base is the basic stats of the player
  Creature base = 1;
  // Character is what class the player is playing as (or if they're the status screen or an audience member)
  Class character = 2;

  // IsAI is true if this player is currently controlled by an AI
  bool is_ai = 3;
  // Level is their current character level, starts at 1
  int32 level = 4;

  // Skills is a map of ID to skill
  map<string,Skill> skills = 5;
  // Inventory is a map of ID to items currently held by this player
  map<string,Item> inventory = 6;
}

// Monster represents an enemy the characters are fighting
message Monster {
  Creature base = 1;
  Type type = 3;
  bool is_flying = 4;
  bool is_boss = 5;
}

// EventMessage is used when the game needs to display a message in the UI
message EventMessage {
  // MsgId is the id of the message
  int32 msg_id = 1;

  // Msg contains the message content
  string msg = 2;

  // IsError is true if the message is about an error that has occured
  bool is_error = 3;

  // IsAlert is true if the message is an alert, and only has an "Ok" button.
  // False means it's a confirmation, which has an "Yes" & "No" button
  bool is_alert = 4;

  // PlayerId is set only if the message is for a specific player.
  google.protobuf.StringValue player_id = 5;

  // LogOnly is a boolean that if true, messages go into the player log without
  // getting any kind of notification
  bool log_only = 6;
}

// CharacterSelected is sent by the game when someone selects a character
// on the character selection screen. This is used to disable that character in the UI
// so nobody else can select it.
message CharacterSelected {
  // Selected is a map of ID -> class
  map<string, ClassType> selected = 1;
}

// Wave has some basic information about the wave
message Wave {
  int32 num = 1;
  bool has_boss = 2;
  Level level = 3;
}

// CurrentState is sent after something has happened to change the state.
message CurrentState {
  // Monsters holds an array of the monsters in the current wave
  repeated Monster monsters = 1;

  // Players contains a list of id->Player of who's in the game currently
  map<string, Player> players = 2;

  // CurrentPlayer is the UUID of the player whose turn it is currently.
  // If it is null, it is currently a monster's turn or the players aren't in battle ( ie, in the store or all dead ).
  google.protobuf.StringValue current_player = 3;

  // Display indicates what screen the game is on currently. Clients don't have to care about all of these.
  // For example, the player display screen doesn't care about the NewWave display.
  Display display = 4;

  // CurrentWave is used to indicate what the current wave is
  Wave current_wave = 5;

  // UpcomingWaves is used to show an "upcoming waves" tracker on the shared info screen
  map<int32, Wave> upcoming_waves = 6;

  // AudienceCount is how many folks are in the active audience ( connected to the current game
  // as an audience member )
  int64 audience_count = 7;

  // list of who's selected what characters
  CharacterSelected selected =8;
}

enum ProgressBarType {
  CountdownGameStarting = 0;
  CountdownTurnEnd = 1;
}

// Tick is a message that's sent out on a set schedule
// that informs things like countdown timers and whatnot
message Tick {
  // Time is just so that the game clients can ignore ticks from too far in the past
  google.protobuf.Timestamp time = 1;

  // Progress is null if there is no progress bar, but if it's present it counts from 100 down to 0
  // so that the clients know that there is a countdown in progress ( such as the game saying that
  // it's about to make a descision for a player in battle, or that the store is about to go away, etc)

  // Progress is a map of type->count. It is used to keep track of any progress bars that are ticking down,
  // where the string name matches a ProgressBarType value.
  map<string, int32> progress = 2;
}

message JoinedGame {
  // Id is the UUID of the player
  string id = 1;
  // AsAudience lets the client know if the player has joined as one of the four main or if they
  // have joined as part of the audience
  bool as_audience = 2;
  // IsVIP is to indicate if the player is "player 1", ie, they're the player
  // that gets to make decisions like when to start the game
  bool is_vip = 3;
  // Name is the name of the player
  string name = 4;
}

// Action is sent when an actor in the game does something ( attacks a target, uses a skill, etc ),
// that requires the UI ( player or status ) to display something.
message Action {
  // Id is a UUID, and should be used in the ActionComplete message
  string id = 1;
  // ActorId is the UUID of the actor performing the action
  string actor_id = 2;
  // TargetIds is the UUID of the target of the action. It may be empty if the action
  // has no target ( ie, a move action ).
  repeated string target_ids = 3;
  // Msg is a human readable message of what the action is, such as "Bob hits the Kobold with Divine Strike
  // for 10 points of damage"
  string msg = 4;

  // Skill is the skill used
  Skill skill = 6;
  // Value is the amount of damage ( or healing ) done by the skill
  int32 value = 7;
}

// Sent when the players enter the store, contains the inventory & prices of
// what's in the store
message StoreInventory {
  // Inventory is a map of UUID -> Item of what's in the store
  map<string,Item> inventory = 1;
  // Prices is a map of UUID -> price of what's in the store
  map<string,int32> prices = 2;
}

// Output is sent by the game server to update clients on various parts of the game
message Output {
  oneof data {
    CurrentState state = 1;
    JoinedGame joined = 2;
    Tick tick = 3;
    EventMessage msg = 4;
    Action action = 5;
    CharacterSelected selected = 6;
    // StoreInventory store_inventory = 7;
  }
}
