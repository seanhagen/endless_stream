// @generated by protoc-gen-es v1.9.0
// @generated from file common/tile.proto (package endless, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Type defines whether the tile is empty, a floor tile, or a wall tile.
 *
 * @generated from enum endless.Type
 */
export declare enum Type {
  /**
   * Empty is a tile without anything in it.
   *
   * @generated from enum value: Empty = 0;
   */
  Empty = 0,

  /**
   * Floor is a tile that can be walked on.
   *
   * @generated from enum value: Floor = 1;
   */
  Floor = 1,

  /**
   * Wall is a tile that blocks movement and line-of-sight.
   *
   * @generated from enum value: Wall = 2;
   */
  Wall = 2,
}

/**
 * Tileset defines what tileset to use in Godot.
 *
 * @generated from enum endless.Tileset
 */
export declare enum Tileset {
  /**
   * @generated from enum value: Dungeon = 0;
   */
  Dungeon = 0,

  /**
   * @generated from enum value: Woods = 1;
   */
  Woods = 1,
}

/**
 * Coordinate is the x,y location in the world for a tile.
 *
 * @generated from message endless.Coordinate
 */
export declare class Coordinate extends Message<Coordinate> {
  /**
   * @generated from field: int32 x = 1;
   */
  x: number;

  /**
   * @generated from field: int32 y = 2;
   */
  y: number;

  constructor(data?: PartialMessage<Coordinate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "endless.Coordinate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coordinate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coordinate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coordinate;

  static equals(a: Coordinate | PlainMessage<Coordinate> | undefined, b: Coordinate | PlainMessage<Coordinate> | undefined): boolean;
}

/**
 * Tile is a single tile within the world.
 *
 * @generated from message endless.Tile
 */
export declare class Tile extends Message<Tile> {
  /**
   * Type defines whether the tile is empty, a floor, or a wall.
   *
   * @generated from field: endless.Type type = 1;
   */
  type: Type;

  /**
   * Coords defines the position of the tile within the world.
   *
   * @generated from field: endless.Coordinate coords = 2;
   */
  coords?: Coordinate;

  constructor(data?: PartialMessage<Tile>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "endless.Tile";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tile;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tile;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tile;

  static equals(a: Tile | PlainMessage<Tile> | undefined, b: Tile | PlainMessage<Tile> | undefined): boolean;
}
