/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var util_pb = require('./util_pb.js');
goog.object.extend(proto, util_pb);
goog.exportSymbol('proto.endless.stream.v1.ActionComplete', null, global);
goog.exportSymbol('proto.endless.stream.v1.AudienceYell', null, global);
goog.exportSymbol('proto.endless.stream.v1.CharSelect', null, global);
goog.exportSymbol('proto.endless.stream.v1.ClientType', null, global);
goog.exportSymbol('proto.endless.stream.v1.Continue', null, global);
goog.exportSymbol('proto.endless.stream.v1.EndGame', null, global);
goog.exportSymbol('proto.endless.stream.v1.GameStart', null, global);
goog.exportSymbol('proto.endless.stream.v1.Input', null, global);
goog.exportSymbol('proto.endless.stream.v1.Move', null, global);
goog.exportSymbol('proto.endless.stream.v1.Move.Dir', null, global);
goog.exportSymbol('proto.endless.stream.v1.Purchase', null, global);
goog.exportSymbol('proto.endless.stream.v1.Register', null, global);
goog.exportSymbol('proto.endless.stream.v1.UseItem', null, global);
goog.exportSymbol('proto.endless.stream.v1.UseSkill', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.Register.displayName = 'proto.endless.stream.v1.Register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.CharSelect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.CharSelect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.CharSelect.displayName = 'proto.endless.stream.v1.CharSelect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.GameStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.GameStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.GameStart.displayName = 'proto.endless.stream.v1.GameStart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.UseSkill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.UseSkill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.UseSkill.displayName = 'proto.endless.stream.v1.UseSkill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.UseItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.UseItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.UseItem.displayName = 'proto.endless.stream.v1.UseItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.Move.displayName = 'proto.endless.stream.v1.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.ActionComplete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.ActionComplete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.ActionComplete.displayName = 'proto.endless.stream.v1.ActionComplete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Purchase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Purchase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.Purchase.displayName = 'proto.endless.stream.v1.Purchase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.EndGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.EndGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.EndGame.displayName = 'proto.endless.stream.v1.EndGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Continue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Continue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.Continue.displayName = 'proto.endless.stream.v1.Continue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.AudienceYell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.AudienceYell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.AudienceYell.displayName = 'proto.endless.stream.v1.AudienceYell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.endless.stream.v1.Input.oneofGroups_);
};
goog.inherits(proto.endless.stream.v1.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endless.stream.v1.Input.displayName = 'proto.endless.stream.v1.Input';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Register.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Register}
 */
proto.endless.stream.v1.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Register;
  return proto.endless.stream.v1.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Register}
 */
proto.endless.stream.v1.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.endless.stream.v1.ClientType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Register.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Register.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.endless.stream.v1.Register.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Register.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.endless.stream.v1.Register.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Register.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ClientType type = 4;
 * @return {!proto.endless.stream.v1.ClientType}
 */
proto.endless.stream.v1.Register.prototype.getType = function() {
  return /** @type {!proto.endless.stream.v1.ClientType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.endless.stream.v1.ClientType} value */
proto.endless.stream.v1.Register.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.CharSelect.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.CharSelect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.CharSelect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CharSelect.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    choice: (f = msg.getChoice()) && util_pb.Class.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.CharSelect}
 */
proto.endless.stream.v1.CharSelect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.CharSelect;
  return proto.endless.stream.v1.CharSelect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.CharSelect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.CharSelect}
 */
proto.endless.stream.v1.CharSelect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new util_pb.Class;
      reader.readMessage(value,util_pb.Class.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.CharSelect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.CharSelect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.CharSelect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CharSelect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      util_pb.Class.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.endless.stream.v1.CharSelect.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.CharSelect.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Class choice = 2;
 * @return {?proto.endless.stream.v1.Class}
 */
proto.endless.stream.v1.CharSelect.prototype.getChoice = function() {
  return /** @type{?proto.endless.stream.v1.Class} */ (
    jspb.Message.getWrapperField(this, util_pb.Class, 2));
};


/** @param {?proto.endless.stream.v1.Class|undefined} value */
proto.endless.stream.v1.CharSelect.prototype.setChoice = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.CharSelect.prototype.clearChoice = function() {
  this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.CharSelect.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.GameStart.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.GameStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.GameStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.GameStart.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.GameStart}
 */
proto.endless.stream.v1.GameStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.GameStart;
  return proto.endless.stream.v1.GameStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.GameStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.GameStart}
 */
proto.endless.stream.v1.GameStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.GameStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.GameStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.GameStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.GameStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.UseSkill.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.UseSkill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.UseSkill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.UseSkill.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.UseSkill}
 */
proto.endless.stream.v1.UseSkill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.UseSkill;
  return proto.endless.stream.v1.UseSkill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.UseSkill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.UseSkill}
 */
proto.endless.stream.v1.UseSkill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkillId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.UseSkill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.UseSkill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.UseSkill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.UseSkill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string skill_id = 1;
 * @return {string}
 */
proto.endless.stream.v1.UseSkill.prototype.getSkillId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.UseSkill.prototype.setSkillId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target_id = 2;
 * @return {string}
 */
proto.endless.stream.v1.UseSkill.prototype.getTargetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.UseSkill.prototype.setTargetId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.UseItem.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.UseItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.UseItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.UseItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.UseItem}
 */
proto.endless.stream.v1.UseItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.UseItem;
  return proto.endless.stream.v1.UseItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.UseItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.UseItem}
 */
proto.endless.stream.v1.UseItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.UseItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.UseItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.UseItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.UseItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string item_id = 1;
 * @return {string}
 */
proto.endless.stream.v1.UseItem.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.UseItem.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    dir: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Move}
 */
proto.endless.stream.v1.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Move;
  return proto.endless.stream.v1.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Move}
 */
proto.endless.stream.v1.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.endless.stream.v1.Move.Dir} */ (reader.readEnum());
      msg.setDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDir();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.endless.stream.v1.Move.Dir = {
  LEFT: 0,
  RIGHT: 1
};

/**
 * optional Dir dir = 1;
 * @return {!proto.endless.stream.v1.Move.Dir}
 */
proto.endless.stream.v1.Move.prototype.getDir = function() {
  return /** @type {!proto.endless.stream.v1.Move.Dir} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.endless.stream.v1.Move.Dir} value */
proto.endless.stream.v1.Move.prototype.setDir = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.ActionComplete.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.ActionComplete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.ActionComplete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.ActionComplete.toObject = function(includeInstance, msg) {
  var f, obj = {
    completedId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.ActionComplete}
 */
proto.endless.stream.v1.ActionComplete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.ActionComplete;
  return proto.endless.stream.v1.ActionComplete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.ActionComplete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.ActionComplete}
 */
proto.endless.stream.v1.ActionComplete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompletedId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.ActionComplete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.ActionComplete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.ActionComplete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.ActionComplete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompletedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string completed_id = 1;
 * @return {string}
 */
proto.endless.stream.v1.ActionComplete.prototype.getCompletedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.ActionComplete.prototype.setCompletedId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Purchase.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Purchase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Purchase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Purchase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Purchase}
 */
proto.endless.stream.v1.Purchase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Purchase;
  return proto.endless.stream.v1.Purchase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Purchase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Purchase}
 */
proto.endless.stream.v1.Purchase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Purchase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Purchase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Purchase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Purchase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Purchase.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Purchase.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.EndGame.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.EndGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.EndGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.EndGame.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.EndGame}
 */
proto.endless.stream.v1.EndGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.EndGame;
  return proto.endless.stream.v1.EndGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.EndGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.EndGame}
 */
proto.endless.stream.v1.EndGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.EndGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.EndGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.EndGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.EndGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Continue.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Continue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Continue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Continue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Continue}
 */
proto.endless.stream.v1.Continue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Continue;
  return proto.endless.stream.v1.Continue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Continue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Continue}
 */
proto.endless.stream.v1.Continue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Continue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Continue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Continue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Continue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.AudienceYell.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.AudienceYell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.AudienceYell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.AudienceYell.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCheering: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    isBooing: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.AudienceYell}
 */
proto.endless.stream.v1.AudienceYell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.AudienceYell;
  return proto.endless.stream.v1.AudienceYell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.AudienceYell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.AudienceYell}
 */
proto.endless.stream.v1.AudienceYell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCheering(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBooing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.AudienceYell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.AudienceYell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.AudienceYell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.AudienceYell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsCheering();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsBooing();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool is_cheering = 1;
 * @return {boolean}
 */
proto.endless.stream.v1.AudienceYell.prototype.getIsCheering = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.AudienceYell.prototype.setIsCheering = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool is_booing = 2;
 * @return {boolean}
 */
proto.endless.stream.v1.AudienceYell.prototype.getIsBooing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.AudienceYell.prototype.setIsBooing = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 amount = 3;
 * @return {number}
 */
proto.endless.stream.v1.AudienceYell.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.endless.stream.v1.AudienceYell.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.endless.stream.v1.Input.oneofGroups_ = [[10,20,30,40,50,60,70,80,90,100,110]];

/**
 * @enum {number}
 */
proto.endless.stream.v1.Input.InputCase = {
  INPUT_NOT_SET: 0,
  REGISTER: 10,
  CHAR_SELECT: 20,
  GAME_START: 30,
  SKILL: 40,
  ITEM: 50,
  MOVE: 60,
  ACTION_COMPLETE: 70,
  PURCHASE: 80,
  CONTINUE: 90,
  END_GAME: 100,
  AUDIENCE: 110
};

/**
 * @return {proto.endless.stream.v1.Input.InputCase}
 */
proto.endless.stream.v1.Input.prototype.getInputCase = function() {
  return /** @type {proto.endless.stream.v1.Input.InputCase} */(jspb.Message.computeOneofCase(this, proto.endless.stream.v1.Input.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    register: (f = msg.getRegister()) && proto.endless.stream.v1.Register.toObject(includeInstance, f),
    charSelect: (f = msg.getCharSelect()) && proto.endless.stream.v1.CharSelect.toObject(includeInstance, f),
    gameStart: (f = msg.getGameStart()) && proto.endless.stream.v1.GameStart.toObject(includeInstance, f),
    skill: (f = msg.getSkill()) && proto.endless.stream.v1.UseSkill.toObject(includeInstance, f),
    item: (f = msg.getItem()) && proto.endless.stream.v1.UseItem.toObject(includeInstance, f),
    move: (f = msg.getMove()) && proto.endless.stream.v1.Move.toObject(includeInstance, f),
    actionComplete: (f = msg.getActionComplete()) && proto.endless.stream.v1.ActionComplete.toObject(includeInstance, f),
    purchase: (f = msg.getPurchase()) && proto.endless.stream.v1.Purchase.toObject(includeInstance, f),
    pb_continue: (f = msg.getContinue()) && proto.endless.stream.v1.Continue.toObject(includeInstance, f),
    endGame: (f = msg.getEndGame()) && proto.endless.stream.v1.EndGame.toObject(includeInstance, f),
    audience: (f = msg.getAudience()) && proto.endless.stream.v1.AudienceYell.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Input}
 */
proto.endless.stream.v1.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Input;
  return proto.endless.stream.v1.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Input}
 */
proto.endless.stream.v1.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 10:
      var value = new proto.endless.stream.v1.Register;
      reader.readMessage(value,proto.endless.stream.v1.Register.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 20:
      var value = new proto.endless.stream.v1.CharSelect;
      reader.readMessage(value,proto.endless.stream.v1.CharSelect.deserializeBinaryFromReader);
      msg.setCharSelect(value);
      break;
    case 30:
      var value = new proto.endless.stream.v1.GameStart;
      reader.readMessage(value,proto.endless.stream.v1.GameStart.deserializeBinaryFromReader);
      msg.setGameStart(value);
      break;
    case 40:
      var value = new proto.endless.stream.v1.UseSkill;
      reader.readMessage(value,proto.endless.stream.v1.UseSkill.deserializeBinaryFromReader);
      msg.setSkill(value);
      break;
    case 50:
      var value = new proto.endless.stream.v1.UseItem;
      reader.readMessage(value,proto.endless.stream.v1.UseItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 60:
      var value = new proto.endless.stream.v1.Move;
      reader.readMessage(value,proto.endless.stream.v1.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 70:
      var value = new proto.endless.stream.v1.ActionComplete;
      reader.readMessage(value,proto.endless.stream.v1.ActionComplete.deserializeBinaryFromReader);
      msg.setActionComplete(value);
      break;
    case 80:
      var value = new proto.endless.stream.v1.Purchase;
      reader.readMessage(value,proto.endless.stream.v1.Purchase.deserializeBinaryFromReader);
      msg.setPurchase(value);
      break;
    case 90:
      var value = new proto.endless.stream.v1.Continue;
      reader.readMessage(value,proto.endless.stream.v1.Continue.deserializeBinaryFromReader);
      msg.setContinue(value);
      break;
    case 100:
      var value = new proto.endless.stream.v1.EndGame;
      reader.readMessage(value,proto.endless.stream.v1.EndGame.deserializeBinaryFromReader);
      msg.setEndGame(value);
      break;
    case 110:
      var value = new proto.endless.stream.v1.AudienceYell;
      reader.readMessage(value,proto.endless.stream.v1.AudienceYell.deserializeBinaryFromReader);
      msg.setAudience(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.endless.stream.v1.Register.serializeBinaryToWriter
    );
  }
  f = message.getCharSelect();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.endless.stream.v1.CharSelect.serializeBinaryToWriter
    );
  }
  f = message.getGameStart();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.endless.stream.v1.GameStart.serializeBinaryToWriter
    );
  }
  f = message.getSkill();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.endless.stream.v1.UseSkill.serializeBinaryToWriter
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.endless.stream.v1.UseItem.serializeBinaryToWriter
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.endless.stream.v1.Move.serializeBinaryToWriter
    );
  }
  f = message.getActionComplete();
  if (f != null) {
    writer.writeMessage(
      70,
      f,
      proto.endless.stream.v1.ActionComplete.serializeBinaryToWriter
    );
  }
  f = message.getPurchase();
  if (f != null) {
    writer.writeMessage(
      80,
      f,
      proto.endless.stream.v1.Purchase.serializeBinaryToWriter
    );
  }
  f = message.getContinue();
  if (f != null) {
    writer.writeMessage(
      90,
      f,
      proto.endless.stream.v1.Continue.serializeBinaryToWriter
    );
  }
  f = message.getEndGame();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.endless.stream.v1.EndGame.serializeBinaryToWriter
    );
  }
  f = message.getAudience();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.endless.stream.v1.AudienceYell.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Input.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Input.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Register register = 10;
 * @return {?proto.endless.stream.v1.Register}
 */
proto.endless.stream.v1.Input.prototype.getRegister = function() {
  return /** @type{?proto.endless.stream.v1.Register} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Register, 10));
};


/** @param {?proto.endless.stream.v1.Register|undefined} value */
proto.endless.stream.v1.Input.prototype.setRegister = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearRegister = function() {
  this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CharSelect char_select = 20;
 * @return {?proto.endless.stream.v1.CharSelect}
 */
proto.endless.stream.v1.Input.prototype.getCharSelect = function() {
  return /** @type{?proto.endless.stream.v1.CharSelect} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.CharSelect, 20));
};


/** @param {?proto.endless.stream.v1.CharSelect|undefined} value */
proto.endless.stream.v1.Input.prototype.setCharSelect = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearCharSelect = function() {
  this.setCharSelect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasCharSelect = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional GameStart game_start = 30;
 * @return {?proto.endless.stream.v1.GameStart}
 */
proto.endless.stream.v1.Input.prototype.getGameStart = function() {
  return /** @type{?proto.endless.stream.v1.GameStart} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.GameStart, 30));
};


/** @param {?proto.endless.stream.v1.GameStart|undefined} value */
proto.endless.stream.v1.Input.prototype.setGameStart = function(value) {
  jspb.Message.setOneofWrapperField(this, 30, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearGameStart = function() {
  this.setGameStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasGameStart = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional UseSkill skill = 40;
 * @return {?proto.endless.stream.v1.UseSkill}
 */
proto.endless.stream.v1.Input.prototype.getSkill = function() {
  return /** @type{?proto.endless.stream.v1.UseSkill} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.UseSkill, 40));
};


/** @param {?proto.endless.stream.v1.UseSkill|undefined} value */
proto.endless.stream.v1.Input.prototype.setSkill = function(value) {
  jspb.Message.setOneofWrapperField(this, 40, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearSkill = function() {
  this.setSkill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasSkill = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional UseItem item = 50;
 * @return {?proto.endless.stream.v1.UseItem}
 */
proto.endless.stream.v1.Input.prototype.getItem = function() {
  return /** @type{?proto.endless.stream.v1.UseItem} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.UseItem, 50));
};


/** @param {?proto.endless.stream.v1.UseItem|undefined} value */
proto.endless.stream.v1.Input.prototype.setItem = function(value) {
  jspb.Message.setOneofWrapperField(this, 50, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasItem = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional Move move = 60;
 * @return {?proto.endless.stream.v1.Move}
 */
proto.endless.stream.v1.Input.prototype.getMove = function() {
  return /** @type{?proto.endless.stream.v1.Move} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Move, 60));
};


/** @param {?proto.endless.stream.v1.Move|undefined} value */
proto.endless.stream.v1.Input.prototype.setMove = function(value) {
  jspb.Message.setOneofWrapperField(this, 60, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearMove = function() {
  this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasMove = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional ActionComplete action_complete = 70;
 * @return {?proto.endless.stream.v1.ActionComplete}
 */
proto.endless.stream.v1.Input.prototype.getActionComplete = function() {
  return /** @type{?proto.endless.stream.v1.ActionComplete} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.ActionComplete, 70));
};


/** @param {?proto.endless.stream.v1.ActionComplete|undefined} value */
proto.endless.stream.v1.Input.prototype.setActionComplete = function(value) {
  jspb.Message.setOneofWrapperField(this, 70, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearActionComplete = function() {
  this.setActionComplete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasActionComplete = function() {
  return jspb.Message.getField(this, 70) != null;
};


/**
 * optional Purchase purchase = 80;
 * @return {?proto.endless.stream.v1.Purchase}
 */
proto.endless.stream.v1.Input.prototype.getPurchase = function() {
  return /** @type{?proto.endless.stream.v1.Purchase} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Purchase, 80));
};


/** @param {?proto.endless.stream.v1.Purchase|undefined} value */
proto.endless.stream.v1.Input.prototype.setPurchase = function(value) {
  jspb.Message.setOneofWrapperField(this, 80, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearPurchase = function() {
  this.setPurchase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasPurchase = function() {
  return jspb.Message.getField(this, 80) != null;
};


/**
 * optional Continue continue = 90;
 * @return {?proto.endless.stream.v1.Continue}
 */
proto.endless.stream.v1.Input.prototype.getContinue = function() {
  return /** @type{?proto.endless.stream.v1.Continue} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Continue, 90));
};


/** @param {?proto.endless.stream.v1.Continue|undefined} value */
proto.endless.stream.v1.Input.prototype.setContinue = function(value) {
  jspb.Message.setOneofWrapperField(this, 90, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearContinue = function() {
  this.setContinue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasContinue = function() {
  return jspb.Message.getField(this, 90) != null;
};


/**
 * optional EndGame end_game = 100;
 * @return {?proto.endless.stream.v1.EndGame}
 */
proto.endless.stream.v1.Input.prototype.getEndGame = function() {
  return /** @type{?proto.endless.stream.v1.EndGame} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.EndGame, 100));
};


/** @param {?proto.endless.stream.v1.EndGame|undefined} value */
proto.endless.stream.v1.Input.prototype.setEndGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearEndGame = function() {
  this.setEndGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasEndGame = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional AudienceYell audience = 110;
 * @return {?proto.endless.stream.v1.AudienceYell}
 */
proto.endless.stream.v1.Input.prototype.getAudience = function() {
  return /** @type{?proto.endless.stream.v1.AudienceYell} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.AudienceYell, 110));
};


/** @param {?proto.endless.stream.v1.AudienceYell|undefined} value */
proto.endless.stream.v1.Input.prototype.setAudience = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.endless.stream.v1.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.endless.stream.v1.Input.prototype.clearAudience = function() {
  this.setAudience(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Input.prototype.hasAudience = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * @enum {number}
 */
proto.endless.stream.v1.ClientType = {
  CLIENTPLAYER: 0,
  CLIENTAUDIENCE: 1,
  CLIENTDISPLAY: 2
};

goog.object.extend(exports, proto.endless.stream.v1);
