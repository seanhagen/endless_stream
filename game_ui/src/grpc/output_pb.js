/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var util_pb = require('./util_pb.js');
goog.object.extend(proto, util_pb);
goog.exportSymbol('proto.endless.stream.v1.Action', null, global);
goog.exportSymbol('proto.endless.stream.v1.CharacterSelected', null, global);
goog.exportSymbol('proto.endless.stream.v1.Creature', null, global);
goog.exportSymbol('proto.endless.stream.v1.CurrentState', null, global);
goog.exportSymbol('proto.endless.stream.v1.EventMessage', null, global);
goog.exportSymbol('proto.endless.stream.v1.Item', null, global);
goog.exportSymbol('proto.endless.stream.v1.JoinedGame', null, global);
goog.exportSymbol('proto.endless.stream.v1.Monster', null, global);
goog.exportSymbol('proto.endless.stream.v1.Output', null, global);
goog.exportSymbol('proto.endless.stream.v1.Player', null, global);
goog.exportSymbol('proto.endless.stream.v1.Position', null, global);
goog.exportSymbol('proto.endless.stream.v1.Skill', null, global);
goog.exportSymbol('proto.endless.stream.v1.StoreInventory', null, global);
goog.exportSymbol('proto.endless.stream.v1.Target', null, global);
goog.exportSymbol('proto.endless.stream.v1.Tick', null, global);
goog.exportSymbol('proto.endless.stream.v1.Wave', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Skill.displayName = 'proto.endless.stream.v1.Skill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    target: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cost: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cooldownLeft: jspb.Message.getFieldWithDefault(msg, 7, 0),
    active: jspb.Message.getFieldWithDefault(msg, 8, false),
    upgradable: jspb.Message.getFieldWithDefault(msg, 9, false),
    description: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Skill}
 */
proto.endless.stream.v1.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Skill;
  return proto.endless.stream.v1.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Skill}
 */
proto.endless.stream.v1.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {!proto.endless.stream.v1.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCost(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCooldown(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCooldownLeft(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpgradable(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCost();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCooldownLeft();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUpgradable();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Skill.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Skill.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.endless.stream.v1.Skill.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Skill.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.endless.stream.v1.Skill.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Skill.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Target target = 4;
 * @return {!proto.endless.stream.v1.Target}
 */
proto.endless.stream.v1.Skill.prototype.getTarget = function() {
  return /** @type {!proto.endless.stream.v1.Target} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.endless.stream.v1.Target} value */
proto.endless.stream.v1.Skill.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 cost = 5;
 * @return {number}
 */
proto.endless.stream.v1.Skill.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Skill.prototype.setCost = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 cooldown = 6;
 * @return {number}
 */
proto.endless.stream.v1.Skill.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Skill.prototype.setCooldown = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 cooldown_left = 7;
 * @return {number}
 */
proto.endless.stream.v1.Skill.prototype.getCooldownLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Skill.prototype.setCooldownLeft = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool active = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Skill.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Skill.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool upgradable = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Skill.prototype.getUpgradable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Skill.prototype.setUpgradable = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string description = 50;
 * @return {string}
 */
proto.endless.stream.v1.Skill.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Skill.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Item.displayName = 'proto.endless.stream.v1.Item';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, 0),
    passive: jspb.Message.getFieldWithDefault(msg, 4, false),
    bonusMap: (f = msg.getBonusMap()) ? f.toObject(includeInstance, undefined) : [],
    count: jspb.Message.getFieldWithDefault(msg, 7, 0),
    active: jspb.Message.getFieldWithDefault(msg, 8, false),
    description: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Item}
 */
proto.endless.stream.v1.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Item;
  return proto.endless.stream.v1.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Item}
 */
proto.endless.stream.v1.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.endless.stream.v1.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassive(value);
      break;
    case 6:
      var value = msg.getBonusMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "");
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPassive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBonusMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Item.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Item.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.endless.stream.v1.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Item.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Target target = 3;
 * @return {!proto.endless.stream.v1.Target}
 */
proto.endless.stream.v1.Item.prototype.getTarget = function() {
  return /** @type {!proto.endless.stream.v1.Target} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.endless.stream.v1.Target} value */
proto.endless.stream.v1.Item.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool passive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Item.prototype.getPassive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Item.prototype.setPassive = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<string, int32> bonus = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.endless.stream.v1.Item.prototype.getBonusMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.endless.stream.v1.Item.prototype.clearBonusMap = function() {
  this.getBonusMap().clear();
};


/**
 * optional int32 count = 7;
 * @return {number}
 */
proto.endless.stream.v1.Item.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Item.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool active = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Item.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Item.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string description = 50;
 * @return {string}
 */
proto.endless.stream.v1.Item.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Item.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Creature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endless.stream.v1.Creature.repeatedFields_, null);
};
goog.inherits(proto.endless.stream.v1.Creature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Creature.displayName = 'proto.endless.stream.v1.Creature';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endless.stream.v1.Creature.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Creature.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Creature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Creature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Creature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxHp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    curHp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    position: jspb.Message.getFieldWithDefault(msg, 5, 0),
    statusesList: jspb.Message.getRepeatedField(msg, 6),
    strength: jspb.Message.getFieldWithDefault(msg, 20, 0),
    vitality: jspb.Message.getFieldWithDefault(msg, 21, 0),
    combatDamageBase: jspb.Message.getFieldWithDefault(msg, 22, 0),
    vitalityRegen: jspb.Message.getFieldWithDefault(msg, 23, 0),
    intelligence: jspb.Message.getFieldWithDefault(msg, 30, 0),
    focus: jspb.Message.getFieldWithDefault(msg, 31, 0),
    willpower: jspb.Message.getFieldWithDefault(msg, 32, 0),
    focusRegen: jspb.Message.getFieldWithDefault(msg, 33, 0),
    agility: jspb.Message.getFieldWithDefault(msg, 40, 0),
    evasion: jspb.Message.getFieldWithDefault(msg, 41, 0),
    accuracy: jspb.Message.getFieldWithDefault(msg, 42, 0),
    initiative: jspb.Message.getFieldWithDefault(msg, 43, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 50, 0),
    xp: jspb.Message.getFieldWithDefault(msg, 51, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Creature}
 */
proto.endless.stream.v1.Creature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Creature;
  return proto.endless.stream.v1.Creature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Creature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Creature}
 */
proto.endless.stream.v1.Creature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxHp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurHp(value);
      break;
    case 5:
      var value = /** @type {!proto.endless.stream.v1.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.endless.stream.v1.StatusEffect>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStrength(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVitality(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCombatDamageBase(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVitalityRegen(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntelligence(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFocus(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWillpower(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFocusRegen(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgility(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEvasion(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccuracy(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitiative(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGold(value);
      break;
    case 51:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setXp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Creature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Creature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Creature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Creature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxHp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurHp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getVitality();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getCombatDamageBase();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getVitalityRegen();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getIntelligence();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getFocus();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getWillpower();
  if (f !== 0) {
    writer.writeInt32(
      32,
      f
    );
  }
  f = message.getFocusRegen();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = message.getAgility();
  if (f !== 0) {
    writer.writeInt32(
      40,
      f
    );
  }
  f = message.getEvasion();
  if (f !== 0) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = message.getAccuracy();
  if (f !== 0) {
    writer.writeInt32(
      42,
      f
    );
  }
  f = message.getInitiative();
  if (f !== 0) {
    writer.writeInt32(
      43,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt64(
      50,
      f
    );
  }
  f = message.getXp();
  if (f !== 0) {
    writer.writeInt64(
      51,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Creature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Creature.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.endless.stream.v1.Creature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Creature.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 max_hp = 3;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getMaxHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setMaxHp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cur_hp = 4;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getCurHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setCurHp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Position position = 5;
 * @return {!proto.endless.stream.v1.Position}
 */
proto.endless.stream.v1.Creature.prototype.getPosition = function() {
  return /** @type {!proto.endless.stream.v1.Position} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.endless.stream.v1.Position} value */
proto.endless.stream.v1.Creature.prototype.setPosition = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated StatusEffect statuses = 6;
 * @return {!Array<!proto.endless.stream.v1.StatusEffect>}
 */
proto.endless.stream.v1.Creature.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.endless.stream.v1.StatusEffect>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<!proto.endless.stream.v1.StatusEffect>} value */
proto.endless.stream.v1.Creature.prototype.setStatusesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.endless.stream.v1.StatusEffect} value
 * @param {number=} opt_index
 */
proto.endless.stream.v1.Creature.prototype.addStatuses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.endless.stream.v1.Creature.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};


/**
 * optional int32 strength = 20;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getStrength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setStrength = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 vitality = 21;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getVitality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setVitality = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 combat_damage_base = 22;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getCombatDamageBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setCombatDamageBase = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 vitality_regen = 23;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getVitalityRegen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setVitalityRegen = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 intelligence = 30;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getIntelligence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setIntelligence = function(value) {
  jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int32 focus = 31;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getFocus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setFocus = function(value) {
  jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional int32 willpower = 32;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getWillpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setWillpower = function(value) {
  jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional int32 focus_regen = 33;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getFocusRegen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setFocusRegen = function(value) {
  jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional int32 agility = 40;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getAgility = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setAgility = function(value) {
  jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional int32 evasion = 41;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getEvasion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setEvasion = function(value) {
  jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional int32 accuracy = 42;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getAccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setAccuracy = function(value) {
  jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional int32 initiative = 43;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getInitiative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setInitiative = function(value) {
  jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional int64 gold = 50;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setGold = function(value) {
  jspb.Message.setProto3IntField(this, 50, value);
};


/**
 * optional int64 xp = 51;
 * @return {number}
 */
proto.endless.stream.v1.Creature.prototype.getXp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 51, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Creature.prototype.setXp = function(value) {
  jspb.Message.setProto3IntField(this, 51, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Player.displayName = 'proto.endless.stream.v1.Player';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.endless.stream.v1.Creature.toObject(includeInstance, f),
    character: (f = msg.getCharacter()) && util_pb.Class.toObject(includeInstance, f),
    isAi: jspb.Message.getFieldWithDefault(msg, 3, false),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    skillsMap: (f = msg.getSkillsMap()) ? f.toObject(includeInstance, proto.endless.stream.v1.Skill.toObject) : [],
    inventoryMap: (f = msg.getInventoryMap()) ? f.toObject(includeInstance, proto.endless.stream.v1.Item.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Player}
 */
proto.endless.stream.v1.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Player;
  return proto.endless.stream.v1.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Player}
 */
proto.endless.stream.v1.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endless.stream.v1.Creature;
      reader.readMessage(value,proto.endless.stream.v1.Creature.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = new util_pb.Class;
      reader.readMessage(value,util_pb.Class.deserializeBinaryFromReader);
      msg.setCharacter(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = msg.getSkillsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endless.stream.v1.Skill.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = msg.getInventoryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endless.stream.v1.Item.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endless.stream.v1.Creature.serializeBinaryToWriter
    );
  }
  f = message.getCharacter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      util_pb.Class.serializeBinaryToWriter
    );
  }
  f = message.getIsAi();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSkillsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endless.stream.v1.Skill.serializeBinaryToWriter);
  }
  f = message.getInventoryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endless.stream.v1.Item.serializeBinaryToWriter);
  }
};


/**
 * optional Creature base = 1;
 * @return {?proto.endless.stream.v1.Creature}
 */
proto.endless.stream.v1.Player.prototype.getBase = function() {
  return /** @type{?proto.endless.stream.v1.Creature} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Creature, 1));
};


/** @param {?proto.endless.stream.v1.Creature|undefined} value */
proto.endless.stream.v1.Player.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.endless.stream.v1.Player.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Player.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Class character = 2;
 * @return {?proto.endless.stream.v1.Class}
 */
proto.endless.stream.v1.Player.prototype.getCharacter = function() {
  return /** @type{?proto.endless.stream.v1.Class} */ (
    jspb.Message.getWrapperField(this, util_pb.Class, 2));
};


/** @param {?proto.endless.stream.v1.Class|undefined} value */
proto.endless.stream.v1.Player.prototype.setCharacter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.endless.stream.v1.Player.prototype.clearCharacter = function() {
  this.setCharacter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Player.prototype.hasCharacter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_ai = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Player.prototype.getIsAi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Player.prototype.setIsAi = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.endless.stream.v1.Player.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Player.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * map<string, Skill> skills = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endless.stream.v1.Skill>}
 */
proto.endless.stream.v1.Player.prototype.getSkillsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endless.stream.v1.Skill>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.endless.stream.v1.Skill));
};


proto.endless.stream.v1.Player.prototype.clearSkillsMap = function() {
  this.getSkillsMap().clear();
};


/**
 * map<string, Item> inventory = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endless.stream.v1.Item>}
 */
proto.endless.stream.v1.Player.prototype.getInventoryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endless.stream.v1.Item>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.endless.stream.v1.Item));
};


proto.endless.stream.v1.Player.prototype.clearInventoryMap = function() {
  this.getInventoryMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Monster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Monster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Monster.displayName = 'proto.endless.stream.v1.Monster';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Monster.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Monster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Monster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Monster.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.endless.stream.v1.Creature.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isFlying: jspb.Message.getFieldWithDefault(msg, 4, false),
    isBoss: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Monster}
 */
proto.endless.stream.v1.Monster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Monster;
  return proto.endless.stream.v1.Monster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Monster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Monster}
 */
proto.endless.stream.v1.Monster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endless.stream.v1.Creature;
      reader.readMessage(value,proto.endless.stream.v1.Creature.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 3:
      var value = /** @type {!proto.endless.stream.v1.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFlying(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBoss(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Monster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Monster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Monster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Monster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endless.stream.v1.Creature.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsFlying();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsBoss();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional Creature base = 1;
 * @return {?proto.endless.stream.v1.Creature}
 */
proto.endless.stream.v1.Monster.prototype.getBase = function() {
  return /** @type{?proto.endless.stream.v1.Creature} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Creature, 1));
};


/** @param {?proto.endless.stream.v1.Creature|undefined} value */
proto.endless.stream.v1.Monster.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.endless.stream.v1.Monster.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Monster.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 3;
 * @return {!proto.endless.stream.v1.Type}
 */
proto.endless.stream.v1.Monster.prototype.getType = function() {
  return /** @type {!proto.endless.stream.v1.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.endless.stream.v1.Type} value */
proto.endless.stream.v1.Monster.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_flying = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Monster.prototype.getIsFlying = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Monster.prototype.setIsFlying = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_boss = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Monster.prototype.getIsBoss = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Monster.prototype.setIsBoss = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.EventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.EventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.EventMessage.displayName = 'proto.endless.stream.v1.EventMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.EventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.EventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.EventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.EventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isError: jspb.Message.getFieldWithDefault(msg, 3, false),
    isAlert: jspb.Message.getFieldWithDefault(msg, 4, false),
    playerId: (f = msg.getPlayerId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    logOnly: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.EventMessage}
 */
proto.endless.stream.v1.EventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.EventMessage;
  return proto.endless.stream.v1.EventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.EventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.EventMessage}
 */
proto.endless.stream.v1.EventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsError(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAlert(value);
      break;
    case 5:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLogOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.EventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.EventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.EventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.EventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsError();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsAlert();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getLogOnly();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 msg_id = 1;
 * @return {number}
 */
proto.endless.stream.v1.EventMessage.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.endless.stream.v1.EventMessage.prototype.setMsgId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.endless.stream.v1.EventMessage.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.EventMessage.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_error = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.EventMessage.prototype.getIsError = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.EventMessage.prototype.setIsError = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_alert = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.EventMessage.prototype.getIsAlert = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.EventMessage.prototype.setIsAlert = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional google.protobuf.StringValue player_id = 5;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.endless.stream.v1.EventMessage.prototype.getPlayerId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 5));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.endless.stream.v1.EventMessage.prototype.setPlayerId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.endless.stream.v1.EventMessage.prototype.clearPlayerId = function() {
  this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.EventMessage.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool log_only = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.EventMessage.prototype.getLogOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.EventMessage.prototype.setLogOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.CharacterSelected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.CharacterSelected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.CharacterSelected.displayName = 'proto.endless.stream.v1.CharacterSelected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.CharacterSelected.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.CharacterSelected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.CharacterSelected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CharacterSelected.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectedMap: (f = msg.getSelectedMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.CharacterSelected}
 */
proto.endless.stream.v1.CharacterSelected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.CharacterSelected;
  return proto.endless.stream.v1.CharacterSelected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.CharacterSelected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.CharacterSelected}
 */
proto.endless.stream.v1.CharacterSelected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSelectedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.CharacterSelected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.CharacterSelected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.CharacterSelected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CharacterSelected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<string, ClassType> selected = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endless.stream.v1.ClassType>}
 */
proto.endless.stream.v1.CharacterSelected.prototype.getSelectedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endless.stream.v1.ClassType>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.endless.stream.v1.CharacterSelected.prototype.clearSelectedMap = function() {
  this.getSelectedMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Wave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Wave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Wave.displayName = 'proto.endless.stream.v1.Wave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Wave.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Wave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Wave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Wave.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hasBoss: jspb.Message.getFieldWithDefault(msg, 2, false),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Wave}
 */
proto.endless.stream.v1.Wave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Wave;
  return proto.endless.stream.v1.Wave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Wave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Wave}
 */
proto.endless.stream.v1.Wave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasBoss(value);
      break;
    case 3:
      var value = /** @type {!proto.endless.stream.v1.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Wave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Wave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Wave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Wave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHasBoss();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 num = 1;
 * @return {number}
 */
proto.endless.stream.v1.Wave.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Wave.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool has_boss = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.Wave.prototype.getHasBoss = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.Wave.prototype.setHasBoss = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Level level = 3;
 * @return {!proto.endless.stream.v1.Level}
 */
proto.endless.stream.v1.Wave.prototype.getLevel = function() {
  return /** @type {!proto.endless.stream.v1.Level} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.endless.stream.v1.Level} value */
proto.endless.stream.v1.Wave.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.CurrentState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endless.stream.v1.CurrentState.repeatedFields_, null);
};
goog.inherits(proto.endless.stream.v1.CurrentState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.CurrentState.displayName = 'proto.endless.stream.v1.CurrentState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endless.stream.v1.CurrentState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.CurrentState.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.CurrentState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.CurrentState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CurrentState.toObject = function(includeInstance, msg) {
  var f, obj = {
    monstersList: jspb.Message.toObjectList(msg.getMonstersList(),
    proto.endless.stream.v1.Monster.toObject, includeInstance),
    playersMap: (f = msg.getPlayersMap()) ? f.toObject(includeInstance, proto.endless.stream.v1.Player.toObject) : [],
    currentPlayer: (f = msg.getCurrentPlayer()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    display: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentWave: (f = msg.getCurrentWave()) && proto.endless.stream.v1.Wave.toObject(includeInstance, f),
    upcomingWavesMap: (f = msg.getUpcomingWavesMap()) ? f.toObject(includeInstance, proto.endless.stream.v1.Wave.toObject) : [],
    audienceCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    selected: (f = msg.getSelected()) && proto.endless.stream.v1.CharacterSelected.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.CurrentState}
 */
proto.endless.stream.v1.CurrentState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.CurrentState;
  return proto.endless.stream.v1.CurrentState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.CurrentState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.CurrentState}
 */
proto.endless.stream.v1.CurrentState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endless.stream.v1.Monster;
      reader.readMessage(value,proto.endless.stream.v1.Monster.deserializeBinaryFromReader);
      msg.addMonsters(value);
      break;
    case 2:
      var value = msg.getPlayersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endless.stream.v1.Player.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setCurrentPlayer(value);
      break;
    case 4:
      var value = /** @type {!proto.endless.stream.v1.Display} */ (reader.readEnum());
      msg.setDisplay(value);
      break;
    case 5:
      var value = new proto.endless.stream.v1.Wave;
      reader.readMessage(value,proto.endless.stream.v1.Wave.deserializeBinaryFromReader);
      msg.setCurrentWave(value);
      break;
    case 6:
      var value = msg.getUpcomingWavesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.endless.stream.v1.Wave.deserializeBinaryFromReader, 0);
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAudienceCount(value);
      break;
    case 8:
      var value = new proto.endless.stream.v1.CharacterSelected;
      reader.readMessage(value,proto.endless.stream.v1.CharacterSelected.deserializeBinaryFromReader);
      msg.setSelected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.CurrentState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.CurrentState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.CurrentState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.CurrentState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonstersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endless.stream.v1.Monster.serializeBinaryToWriter
    );
  }
  f = message.getPlayersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endless.stream.v1.Player.serializeBinaryToWriter);
  }
  f = message.getCurrentPlayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getDisplay();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCurrentWave();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endless.stream.v1.Wave.serializeBinaryToWriter
    );
  }
  f = message.getUpcomingWavesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.endless.stream.v1.Wave.serializeBinaryToWriter);
  }
  f = message.getAudienceCount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSelected();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.endless.stream.v1.CharacterSelected.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Monster monsters = 1;
 * @return {!Array<!proto.endless.stream.v1.Monster>}
 */
proto.endless.stream.v1.CurrentState.prototype.getMonstersList = function() {
  return /** @type{!Array<!proto.endless.stream.v1.Monster>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endless.stream.v1.Monster, 1));
};


/** @param {!Array<!proto.endless.stream.v1.Monster>} value */
proto.endless.stream.v1.CurrentState.prototype.setMonstersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endless.stream.v1.Monster=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endless.stream.v1.Monster}
 */
proto.endless.stream.v1.CurrentState.prototype.addMonsters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endless.stream.v1.Monster, opt_index);
};


proto.endless.stream.v1.CurrentState.prototype.clearMonstersList = function() {
  this.setMonstersList([]);
};


/**
 * map<string, Player> players = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endless.stream.v1.Player>}
 */
proto.endless.stream.v1.CurrentState.prototype.getPlayersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endless.stream.v1.Player>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.endless.stream.v1.Player));
};


proto.endless.stream.v1.CurrentState.prototype.clearPlayersMap = function() {
  this.getPlayersMap().clear();
};


/**
 * optional google.protobuf.StringValue current_player = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.endless.stream.v1.CurrentState.prototype.getCurrentPlayer = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 3));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.endless.stream.v1.CurrentState.prototype.setCurrentPlayer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.endless.stream.v1.CurrentState.prototype.clearCurrentPlayer = function() {
  this.setCurrentPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.CurrentState.prototype.hasCurrentPlayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Display display = 4;
 * @return {!proto.endless.stream.v1.Display}
 */
proto.endless.stream.v1.CurrentState.prototype.getDisplay = function() {
  return /** @type {!proto.endless.stream.v1.Display} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.endless.stream.v1.Display} value */
proto.endless.stream.v1.CurrentState.prototype.setDisplay = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Wave current_wave = 5;
 * @return {?proto.endless.stream.v1.Wave}
 */
proto.endless.stream.v1.CurrentState.prototype.getCurrentWave = function() {
  return /** @type{?proto.endless.stream.v1.Wave} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Wave, 5));
};


/** @param {?proto.endless.stream.v1.Wave|undefined} value */
proto.endless.stream.v1.CurrentState.prototype.setCurrentWave = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.endless.stream.v1.CurrentState.prototype.clearCurrentWave = function() {
  this.setCurrentWave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.CurrentState.prototype.hasCurrentWave = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<int32, Wave> upcoming_waves = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.endless.stream.v1.Wave>}
 */
proto.endless.stream.v1.CurrentState.prototype.getUpcomingWavesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.endless.stream.v1.Wave>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.endless.stream.v1.Wave));
};


proto.endless.stream.v1.CurrentState.prototype.clearUpcomingWavesMap = function() {
  this.getUpcomingWavesMap().clear();
};


/**
 * optional int64 audience_count = 7;
 * @return {number}
 */
proto.endless.stream.v1.CurrentState.prototype.getAudienceCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.endless.stream.v1.CurrentState.prototype.setAudienceCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional CharacterSelected selected = 8;
 * @return {?proto.endless.stream.v1.CharacterSelected}
 */
proto.endless.stream.v1.CurrentState.prototype.getSelected = function() {
  return /** @type{?proto.endless.stream.v1.CharacterSelected} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.CharacterSelected, 8));
};


/** @param {?proto.endless.stream.v1.CharacterSelected|undefined} value */
proto.endless.stream.v1.CurrentState.prototype.setSelected = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.endless.stream.v1.CurrentState.prototype.clearSelected = function() {
  this.setSelected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.CurrentState.prototype.hasSelected = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Tick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.Tick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Tick.displayName = 'proto.endless.stream.v1.Tick';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Tick.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Tick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Tick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Tick.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Tick}
 */
proto.endless.stream.v1.Tick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Tick;
  return proto.endless.stream.v1.Tick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Tick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Tick}
 */
proto.endless.stream.v1.Tick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Tick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Tick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Tick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Tick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.endless.stream.v1.Tick.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.endless.stream.v1.Tick.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.endless.stream.v1.Tick.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Tick.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Int32Value progress = 2;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.endless.stream.v1.Tick.prototype.getProgress = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 2));
};


/** @param {?proto.google.protobuf.Int32Value|undefined} value */
proto.endless.stream.v1.Tick.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.endless.stream.v1.Tick.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Tick.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.JoinedGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.JoinedGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.JoinedGame.displayName = 'proto.endless.stream.v1.JoinedGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.JoinedGame.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.JoinedGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.JoinedGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.JoinedGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asAudience: jspb.Message.getFieldWithDefault(msg, 2, false),
    isVip: jspb.Message.getFieldWithDefault(msg, 3, false),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.JoinedGame}
 */
proto.endless.stream.v1.JoinedGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.JoinedGame;
  return proto.endless.stream.v1.JoinedGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.JoinedGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.JoinedGame}
 */
proto.endless.stream.v1.JoinedGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsAudience(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.JoinedGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.JoinedGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.JoinedGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.JoinedGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsAudience();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsVip();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.JoinedGame.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.JoinedGame.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool as_audience = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.JoinedGame.prototype.getAsAudience = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.JoinedGame.prototype.setAsAudience = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool is_vip = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.endless.stream.v1.JoinedGame.prototype.getIsVip = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.endless.stream.v1.JoinedGame.prototype.setIsVip = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.endless.stream.v1.JoinedGame.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.endless.stream.v1.JoinedGame.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endless.stream.v1.Action.repeatedFields_, null);
};
goog.inherits(proto.endless.stream.v1.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Action.displayName = 'proto.endless.stream.v1.Action';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endless.stream.v1.Action.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetIdsList: jspb.Message.getRepeatedField(msg, 3),
    msg: jspb.Message.getFieldWithDefault(msg, 4, ""),
    skill: (f = msg.getSkill()) && proto.endless.stream.v1.Skill.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Action}
 */
proto.endless.stream.v1.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Action;
  return proto.endless.stream.v1.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Action}
 */
proto.endless.stream.v1.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTargetIds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 6:
      var value = new proto.endless.stream.v1.Skill;
      reader.readMessage(value,proto.endless.stream.v1.Skill.deserializeBinaryFromReader);
      msg.setSkill(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSkill();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.endless.stream.v1.Skill.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endless.stream.v1.Action.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Action.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actor_id = 2;
 * @return {string}
 */
proto.endless.stream.v1.Action.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Action.prototype.setActorId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string target_ids = 3;
 * @return {!Array<string>}
 */
proto.endless.stream.v1.Action.prototype.getTargetIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.endless.stream.v1.Action.prototype.setTargetIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.endless.stream.v1.Action.prototype.addTargetIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.endless.stream.v1.Action.prototype.clearTargetIdsList = function() {
  this.setTargetIdsList([]);
};


/**
 * optional string msg = 4;
 * @return {string}
 */
proto.endless.stream.v1.Action.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.endless.stream.v1.Action.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Skill skill = 6;
 * @return {?proto.endless.stream.v1.Skill}
 */
proto.endless.stream.v1.Action.prototype.getSkill = function() {
  return /** @type{?proto.endless.stream.v1.Skill} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Skill, 6));
};


/** @param {?proto.endless.stream.v1.Skill|undefined} value */
proto.endless.stream.v1.Action.prototype.setSkill = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.endless.stream.v1.Action.prototype.clearSkill = function() {
  this.setSkill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Action.prototype.hasSkill = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 value = 7;
 * @return {number}
 */
proto.endless.stream.v1.Action.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.endless.stream.v1.Action.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.StoreInventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endless.stream.v1.StoreInventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.StoreInventory.displayName = 'proto.endless.stream.v1.StoreInventory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.StoreInventory.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.StoreInventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.StoreInventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.StoreInventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    inventoryMap: (f = msg.getInventoryMap()) ? f.toObject(includeInstance, proto.endless.stream.v1.Item.toObject) : [],
    pricesMap: (f = msg.getPricesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.StoreInventory}
 */
proto.endless.stream.v1.StoreInventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.StoreInventory;
  return proto.endless.stream.v1.StoreInventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.StoreInventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.StoreInventory}
 */
proto.endless.stream.v1.StoreInventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getInventoryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endless.stream.v1.Item.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = msg.getPricesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.StoreInventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.StoreInventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.StoreInventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.StoreInventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInventoryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endless.stream.v1.Item.serializeBinaryToWriter);
  }
  f = message.getPricesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<string, Item> inventory = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endless.stream.v1.Item>}
 */
proto.endless.stream.v1.StoreInventory.prototype.getInventoryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endless.stream.v1.Item>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.endless.stream.v1.Item));
};


proto.endless.stream.v1.StoreInventory.prototype.clearInventoryMap = function() {
  this.getInventoryMap().clear();
};


/**
 * map<string, int32> prices = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.endless.stream.v1.StoreInventory.prototype.getPricesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.endless.stream.v1.StoreInventory.prototype.clearPricesMap = function() {
  this.getPricesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endless.stream.v1.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.endless.stream.v1.Output.oneofGroups_);
};
goog.inherits(proto.endless.stream.v1.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.endless.stream.v1.Output.displayName = 'proto.endless.stream.v1.Output';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.endless.stream.v1.Output.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.endless.stream.v1.Output.DataCase = {
  DATA_NOT_SET: 0,
  STATE: 1,
  JOINED: 2,
  TICK: 3,
  MSG: 4,
  ACTION: 5,
  SELECTED: 6
};

/**
 * @return {proto.endless.stream.v1.Output.DataCase}
 */
proto.endless.stream.v1.Output.prototype.getDataCase = function() {
  return /** @type {proto.endless.stream.v1.Output.DataCase} */(jspb.Message.computeOneofCase(this, proto.endless.stream.v1.Output.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endless.stream.v1.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.endless.stream.v1.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endless.stream.v1.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.endless.stream.v1.CurrentState.toObject(includeInstance, f),
    joined: (f = msg.getJoined()) && proto.endless.stream.v1.JoinedGame.toObject(includeInstance, f),
    tick: (f = msg.getTick()) && proto.endless.stream.v1.Tick.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && proto.endless.stream.v1.EventMessage.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.endless.stream.v1.Action.toObject(includeInstance, f),
    selected: (f = msg.getSelected()) && proto.endless.stream.v1.CharacterSelected.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endless.stream.v1.Output}
 */
proto.endless.stream.v1.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endless.stream.v1.Output;
  return proto.endless.stream.v1.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endless.stream.v1.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endless.stream.v1.Output}
 */
proto.endless.stream.v1.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endless.stream.v1.CurrentState;
      reader.readMessage(value,proto.endless.stream.v1.CurrentState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.endless.stream.v1.JoinedGame;
      reader.readMessage(value,proto.endless.stream.v1.JoinedGame.deserializeBinaryFromReader);
      msg.setJoined(value);
      break;
    case 3:
      var value = new proto.endless.stream.v1.Tick;
      reader.readMessage(value,proto.endless.stream.v1.Tick.deserializeBinaryFromReader);
      msg.setTick(value);
      break;
    case 4:
      var value = new proto.endless.stream.v1.EventMessage;
      reader.readMessage(value,proto.endless.stream.v1.EventMessage.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 5:
      var value = new proto.endless.stream.v1.Action;
      reader.readMessage(value,proto.endless.stream.v1.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 6:
      var value = new proto.endless.stream.v1.CharacterSelected;
      reader.readMessage(value,proto.endless.stream.v1.CharacterSelected.deserializeBinaryFromReader);
      msg.setSelected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endless.stream.v1.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endless.stream.v1.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endless.stream.v1.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endless.stream.v1.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endless.stream.v1.CurrentState.serializeBinaryToWriter
    );
  }
  f = message.getJoined();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.endless.stream.v1.JoinedGame.serializeBinaryToWriter
    );
  }
  f = message.getTick();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.endless.stream.v1.Tick.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.endless.stream.v1.EventMessage.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endless.stream.v1.Action.serializeBinaryToWriter
    );
  }
  f = message.getSelected();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.endless.stream.v1.CharacterSelected.serializeBinaryToWriter
    );
  }
};


/**
 * optional CurrentState state = 1;
 * @return {?proto.endless.stream.v1.CurrentState}
 */
proto.endless.stream.v1.Output.prototype.getState = function() {
  return /** @type{?proto.endless.stream.v1.CurrentState} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.CurrentState, 1));
};


/** @param {?proto.endless.stream.v1.CurrentState|undefined} value */
proto.endless.stream.v1.Output.prototype.setState = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JoinedGame joined = 2;
 * @return {?proto.endless.stream.v1.JoinedGame}
 */
proto.endless.stream.v1.Output.prototype.getJoined = function() {
  return /** @type{?proto.endless.stream.v1.JoinedGame} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.JoinedGame, 2));
};


/** @param {?proto.endless.stream.v1.JoinedGame|undefined} value */
proto.endless.stream.v1.Output.prototype.setJoined = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearJoined = function() {
  this.setJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasJoined = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tick tick = 3;
 * @return {?proto.endless.stream.v1.Tick}
 */
proto.endless.stream.v1.Output.prototype.getTick = function() {
  return /** @type{?proto.endless.stream.v1.Tick} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Tick, 3));
};


/** @param {?proto.endless.stream.v1.Tick|undefined} value */
proto.endless.stream.v1.Output.prototype.setTick = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearTick = function() {
  this.setTick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasTick = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventMessage msg = 4;
 * @return {?proto.endless.stream.v1.EventMessage}
 */
proto.endless.stream.v1.Output.prototype.getMsg = function() {
  return /** @type{?proto.endless.stream.v1.EventMessage} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.EventMessage, 4));
};


/** @param {?proto.endless.stream.v1.EventMessage|undefined} value */
proto.endless.stream.v1.Output.prototype.setMsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Action action = 5;
 * @return {?proto.endless.stream.v1.Action}
 */
proto.endless.stream.v1.Output.prototype.getAction = function() {
  return /** @type{?proto.endless.stream.v1.Action} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.Action, 5));
};


/** @param {?proto.endless.stream.v1.Action|undefined} value */
proto.endless.stream.v1.Output.prototype.setAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasAction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CharacterSelected selected = 6;
 * @return {?proto.endless.stream.v1.CharacterSelected}
 */
proto.endless.stream.v1.Output.prototype.getSelected = function() {
  return /** @type{?proto.endless.stream.v1.CharacterSelected} */ (
    jspb.Message.getWrapperField(this, proto.endless.stream.v1.CharacterSelected, 6));
};


/** @param {?proto.endless.stream.v1.CharacterSelected|undefined} value */
proto.endless.stream.v1.Output.prototype.setSelected = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.endless.stream.v1.Output.oneofGroups_[0], value);
};


proto.endless.stream.v1.Output.prototype.clearSelected = function() {
  this.setSelected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endless.stream.v1.Output.prototype.hasSelected = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.endless.stream.v1.Target = {
  SELF: 0,
  MELEE: 1,
  RANGED: 2,
  AOE: 3
};

/**
 * @enum {number}
 */
proto.endless.stream.v1.Position = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};

goog.object.extend(exports, proto.endless.stream.v1);
