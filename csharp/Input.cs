// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: input.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Endless.Stream.V1 {

  /// <summary>Holder for reflection information generated from input.proto</summary>
  public static partial class InputReflection {

    #region Descriptor
    /// <summary>File descriptor for input.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InputReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtpbnB1dC5wcm90bxIRZW5kbGVzcy5zdHJlYW0udjEaCnV0aWwucHJvdG8i",
            "XwoIUmVnaXN0ZXISCgoCaWQYASABKAkSDAoEY29kZRgCIAEoCRIMCgRuYW1l",
            "GAMgASgJEisKBHR5cGUYBCABKA4yHS5lbmRsZXNzLnN0cmVhbS52MS5DbGll",
            "bnRUeXBlIkkKCkNoYXJTZWxlY3QSEQoJcGxheWVyX2lkGAEgASgJEigKBmNo",
            "b2ljZRgCIAEoCzIYLmVuZGxlc3Muc3RyZWFtLnYxLkNsYXNzIgsKCUdhbWVT",
            "dGFydCIvCghVc2VTa2lsbBIQCghza2lsbF9pZBgBIAEoCRIRCgl0YXJnZXRf",
            "aWQYAiABKAkiGgoHVXNlSXRlbRIPCgdpdGVtX2lkGAEgASgJIkwKBE1vdmUS",
            "KAoDZGlyGAEgASgOMhsuZW5kbGVzcy5zdHJlYW0udjEuTW92ZS5EaXIiGgoD",
            "RGlyEggKBExlZnQQABIJCgVSaWdodBABIiYKDkFjdGlvbkNvbXBsZXRlEhQK",
            "DGNvbXBsZXRlZF9pZBgBIAEoCSIWCghQdXJjaGFzZRIKCgJpZBgBIAEoCSIJ",
            "CgdFbmRHYW1lIgoKCENvbnRpbnVlIkYKDEF1ZGllbmNlWWVsbBITCgtpc19j",
            "aGVlcmluZxgBIAEoCBIRCglpc19ib29pbmcYAiABKAgSDgoGYW1vdW50GAMg",
            "ASgFIsYECgVJbnB1dBIRCglwbGF5ZXJfaWQYASABKAkSLwoIcmVnaXN0ZXIY",
            "CiABKAsyGy5lbmRsZXNzLnN0cmVhbS52MS5SZWdpc3RlckgAEjQKC2NoYXJf",
            "c2VsZWN0GBQgASgLMh0uZW5kbGVzcy5zdHJlYW0udjEuQ2hhclNlbGVjdEgA",
            "EjIKCmdhbWVfc3RhcnQYHiABKAsyHC5lbmRsZXNzLnN0cmVhbS52MS5HYW1l",
            "U3RhcnRIABIsCgVza2lsbBgoIAEoCzIbLmVuZGxlc3Muc3RyZWFtLnYxLlVz",
            "ZVNraWxsSAASKgoEaXRlbRgyIAEoCzIaLmVuZGxlc3Muc3RyZWFtLnYxLlVz",
            "ZUl0ZW1IABInCgRtb3ZlGDwgASgLMhcuZW5kbGVzcy5zdHJlYW0udjEuTW92",
            "ZUgAEjwKD2FjdGlvbl9jb21wbGV0ZRhGIAEoCzIhLmVuZGxlc3Muc3RyZWFt",
            "LnYxLkFjdGlvbkNvbXBsZXRlSAASLwoIcHVyY2hhc2UYUCABKAsyGy5lbmRs",
            "ZXNzLnN0cmVhbS52MS5QdXJjaGFzZUgAEi8KCGNvbnRpbnVlGFogASgLMhsu",
            "ZW5kbGVzcy5zdHJlYW0udjEuQ29udGludWVIABIuCghlbmRfZ2FtZRhkIAEo",
            "CzIaLmVuZGxlc3Muc3RyZWFtLnYxLkVuZEdhbWVIABIzCghhdWRpZW5jZRhu",
            "IAEoCzIfLmVuZGxlc3Muc3RyZWFtLnYxLkF1ZGllbmNlWWVsbEgAQgcKBWlu",
            "cHV0KkUKCkNsaWVudFR5cGUSEAoMQ2xpZW50UGxheWVyEAASEgoOQ2xpZW50",
            "QXVkaWVuY2UQARIRCg1DbGllbnREaXNwbGF5EAJCNVozZ2l0aHViLmNvbS9z",
            "ZWFuaGFnZW4vZW5kbGVzc19zdHJlYW0vYmFja2VuZC9lbmRsZXNzYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Endless.Stream.V1.UtilReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Endless.Stream.V1.ClientType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.Register), global::Endless.Stream.V1.Register.Parser, new[]{ "Id", "Code", "Name", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.CharSelect), global::Endless.Stream.V1.CharSelect.Parser, new[]{ "PlayerId", "Choice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.GameStart), global::Endless.Stream.V1.GameStart.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.UseSkill), global::Endless.Stream.V1.UseSkill.Parser, new[]{ "SkillId", "TargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.UseItem), global::Endless.Stream.V1.UseItem.Parser, new[]{ "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.Move), global::Endless.Stream.V1.Move.Parser, new[]{ "Dir" }, null, new[]{ typeof(global::Endless.Stream.V1.Move.Types.Dir) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.ActionComplete), global::Endless.Stream.V1.ActionComplete.Parser, new[]{ "CompletedId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.Purchase), global::Endless.Stream.V1.Purchase.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.EndGame), global::Endless.Stream.V1.EndGame.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.Continue), global::Endless.Stream.V1.Continue.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.AudienceYell), global::Endless.Stream.V1.AudienceYell.Parser, new[]{ "IsCheering", "IsBooing", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Endless.Stream.V1.Input), global::Endless.Stream.V1.Input.Parser, new[]{ "PlayerId", "Register", "CharSelect", "GameStart", "Skill", "Item", "Move", "ActionComplete", "Purchase", "Continue", "EndGame", "Audience" }, new[]{ "Input" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ClientType {
    /// <summary>
    /// ClientPlayer is a client that is a player
    /// </summary>
    [pbr::OriginalName("ClientPlayer")] ClientPlayer = 0,
    /// <summary>
    /// ClientAudience is a client that represents an audience member
    /// </summary>
    [pbr::OriginalName("ClientAudience")] ClientAudience = 1,
    /// <summary>
    /// ClientDisplay is a client that represents the shared info display
    /// </summary>
    [pbr::OriginalName("ClientDisplay")] ClientDisplay = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Register : pb::IMessage<Register> {
    private static readonly pb::MessageParser<Register> _parser = new pb::MessageParser<Register>(() => new Register());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Register> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Register() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Register(Register other) : this() {
      id_ = other.id_;
      code_ = other.code_;
      name_ = other.name_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Register Clone() {
      return new Register(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Endless.Stream.V1.ClientType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.ClientType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Register);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Register other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Register other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Endless.Stream.V1.ClientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharSelect : pb::IMessage<CharSelect> {
    private static readonly pb::MessageParser<CharSelect> _parser = new pb::MessageParser<CharSelect>(() => new CharSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharSelect(CharSelect other) : this() {
      playerId_ = other.playerId_;
      choice_ = other.choice_ != null ? other.choice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharSelect Clone() {
      return new CharSelect(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 2;
    private global::Endless.Stream.V1.Class choice_;
    /// <summary>
    /// if nil, means they've unselected their choice
    /// this allows for players to swap when all four have been selected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Class Choice {
      get { return choice_; }
      set {
        choice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Choice, other.Choice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (choice_ != null) hash ^= Choice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (choice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Choice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (choice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharSelect other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.choice_ != null) {
        if (choice_ == null) {
          Choice = new global::Endless.Stream.V1.Class();
        }
        Choice.MergeFrom(other.Choice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            if (choice_ == null) {
              Choice = new global::Endless.Stream.V1.Class();
            }
            input.ReadMessage(Choice);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStart : pb::IMessage<GameStart> {
    private static readonly pb::MessageParser<GameStart> _parser = new pb::MessageParser<GameStart>(() => new GameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart(GameStart other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart Clone() {
      return new GameStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStart other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UseSkill : pb::IMessage<UseSkill> {
    private static readonly pb::MessageParser<UseSkill> _parser = new pb::MessageParser<UseSkill>(() => new UseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill(UseSkill other) : this() {
      skillId_ = other.skillId_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill Clone() {
      return new UseSkill(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private string skillId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private string targetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetId {
      get { return targetId_; }
      set {
        targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SkillId);
      }
      if (TargetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (TargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillId.Length != 0) {
        SkillId = other.SkillId;
      }
      if (other.TargetId.Length != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SkillId = input.ReadString();
            break;
          }
          case 18: {
            TargetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseItem : pb::IMessage<UseItem> {
    private static readonly pb::MessageParser<UseItem> _parser = new pb::MessageParser<UseItem>(() => new UseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem(UseItem other) : this() {
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem Clone() {
      return new UseItem(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private string itemId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      dir_ = other.dir_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 1;
    private global::Endless.Stream.V1.Move.Types.Dir dir_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Move.Types.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dir != other.Dir) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dir != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dir = (global::Endless.Stream.V1.Move.Types.Dir) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Move message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Dir {
        [pbr::OriginalName("Left")] Left = 0,
        [pbr::OriginalName("Right")] Right = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// ActionComplete is sent by the players &amp; status UI clients once they've all processed
  /// an action and updated
  /// </summary>
  public sealed partial class ActionComplete : pb::IMessage<ActionComplete> {
    private static readonly pb::MessageParser<ActionComplete> _parser = new pb::MessageParser<ActionComplete>(() => new ActionComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionComplete(ActionComplete other) : this() {
      completedId_ = other.completedId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionComplete Clone() {
      return new ActionComplete(this);
    }

    /// <summary>Field number for the "completed_id" field.</summary>
    public const int CompletedIdFieldNumber = 1;
    private string completedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompletedId {
      get { return completedId_; }
      set {
        completedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompletedId != other.CompletedId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompletedId.Length != 0) hash ^= CompletedId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompletedId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompletedId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompletedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompletedId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionComplete other) {
      if (other == null) {
        return;
      }
      if (other.CompletedId.Length != 0) {
        CompletedId = other.CompletedId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CompletedId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Purchase is sent when a player has selected an item to buy in the store
  /// </summary>
  public sealed partial class Purchase : pb::IMessage<Purchase> {
    private static readonly pb::MessageParser<Purchase> _parser = new pb::MessageParser<Purchase>(() => new Purchase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Purchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase(Purchase other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase Clone() {
      return new Purchase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Purchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Purchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Purchase other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndGame : pb::IMessage<EndGame> {
    private static readonly pb::MessageParser<EndGame> _parser = new pb::MessageParser<EndGame>(() => new EndGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndGame(EndGame other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndGame Clone() {
      return new EndGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndGame other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Continue is sent when a player has acknowledged that they're ready to continue. This
  /// is sent when the game is in the Victory, Store, or New Wave screens so that the game
  /// can continue if all players have stated they're ready ( otherwise a timer will automatically
  /// advance to the next state )
  /// </summary>
  public sealed partial class Continue : pb::IMessage<Continue> {
    private static readonly pb::MessageParser<Continue> _parser = new pb::MessageParser<Continue>(() => new Continue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Continue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Continue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Continue(Continue other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Continue Clone() {
      return new Continue(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Continue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Continue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Continue other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AudienceYell : pb::IMessage<AudienceYell> {
    private static readonly pb::MessageParser<AudienceYell> _parser = new pb::MessageParser<AudienceYell>(() => new AudienceYell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudienceYell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudienceYell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudienceYell(AudienceYell other) : this() {
      isCheering_ = other.isCheering_;
      isBooing_ = other.isBooing_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudienceYell Clone() {
      return new AudienceYell(this);
    }

    /// <summary>Field number for the "is_cheering" field.</summary>
    public const int IsCheeringFieldNumber = 1;
    private bool isCheering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCheering {
      get { return isCheering_; }
      set {
        isCheering_ = value;
      }
    }

    /// <summary>Field number for the "is_booing" field.</summary>
    public const int IsBooingFieldNumber = 2;
    private bool isBooing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBooing {
      get { return isBooing_; }
      set {
        isBooing_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudienceYell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudienceYell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCheering != other.IsCheering) return false;
      if (IsBooing != other.IsBooing) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCheering != false) hash ^= IsCheering.GetHashCode();
      if (IsBooing != false) hash ^= IsBooing.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsCheering != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCheering);
      }
      if (IsBooing != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBooing);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCheering != false) {
        size += 1 + 1;
      }
      if (IsBooing != false) {
        size += 1 + 1;
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudienceYell other) {
      if (other == null) {
        return;
      }
      if (other.IsCheering != false) {
        IsCheering = other.IsCheering;
      }
      if (other.IsBooing != false) {
        IsBooing = other.IsBooing;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCheering = input.ReadBool();
            break;
          }
          case 16: {
            IsBooing = input.ReadBool();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Endless.Stream.V1.InputReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      playerId_ = other.playerId_;
      switch (other.InputCase) {
        case InputOneofCase.Register:
          Register = other.Register.Clone();
          break;
        case InputOneofCase.CharSelect:
          CharSelect = other.CharSelect.Clone();
          break;
        case InputOneofCase.GameStart:
          GameStart = other.GameStart.Clone();
          break;
        case InputOneofCase.Skill:
          Skill = other.Skill.Clone();
          break;
        case InputOneofCase.Item:
          Item = other.Item.Clone();
          break;
        case InputOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case InputOneofCase.ActionComplete:
          ActionComplete = other.ActionComplete.Clone();
          break;
        case InputOneofCase.Purchase:
          Purchase = other.Purchase.Clone();
          break;
        case InputOneofCase.Continue:
          Continue = other.Continue.Clone();
          break;
        case InputOneofCase.EndGame:
          EndGame = other.EndGame.Clone();
          break;
        case InputOneofCase.Audience:
          Audience = other.Audience.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register" field.</summary>
    public const int RegisterFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Register Register {
      get { return inputCase_ == InputOneofCase.Register ? (global::Endless.Stream.V1.Register) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Register;
      }
    }

    /// <summary>Field number for the "char_select" field.</summary>
    public const int CharSelectFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.CharSelect CharSelect {
      get { return inputCase_ == InputOneofCase.CharSelect ? (global::Endless.Stream.V1.CharSelect) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.CharSelect;
      }
    }

    /// <summary>Field number for the "game_start" field.</summary>
    public const int GameStartFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.GameStart GameStart {
      get { return inputCase_ == InputOneofCase.GameStart ? (global::Endless.Stream.V1.GameStart) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.GameStart;
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.UseSkill Skill {
      get { return inputCase_ == InputOneofCase.Skill ? (global::Endless.Stream.V1.UseSkill) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Skill;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.UseItem Item {
      get { return inputCase_ == InputOneofCase.Item ? (global::Endless.Stream.V1.UseItem) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Item;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 60;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Move Move {
      get { return inputCase_ == InputOneofCase.Move ? (global::Endless.Stream.V1.Move) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Move;
      }
    }

    /// <summary>Field number for the "action_complete" field.</summary>
    public const int ActionCompleteFieldNumber = 70;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.ActionComplete ActionComplete {
      get { return inputCase_ == InputOneofCase.ActionComplete ? (global::Endless.Stream.V1.ActionComplete) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.ActionComplete;
      }
    }

    /// <summary>Field number for the "purchase" field.</summary>
    public const int PurchaseFieldNumber = 80;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Purchase Purchase {
      get { return inputCase_ == InputOneofCase.Purchase ? (global::Endless.Stream.V1.Purchase) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Purchase;
      }
    }

    /// <summary>Field number for the "continue" field.</summary>
    public const int ContinueFieldNumber = 90;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.Continue Continue {
      get { return inputCase_ == InputOneofCase.Continue ? (global::Endless.Stream.V1.Continue) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Continue;
      }
    }

    /// <summary>Field number for the "end_game" field.</summary>
    public const int EndGameFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.EndGame EndGame {
      get { return inputCase_ == InputOneofCase.EndGame ? (global::Endless.Stream.V1.EndGame) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.EndGame;
      }
    }

    /// <summary>Field number for the "audience" field.</summary>
    public const int AudienceFieldNumber = 110;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Endless.Stream.V1.AudienceYell Audience {
      get { return inputCase_ == InputOneofCase.Audience ? (global::Endless.Stream.V1.AudienceYell) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Audience;
      }
    }

    private object input_;
    /// <summary>Enum of possible cases for the "input" oneof.</summary>
    public enum InputOneofCase {
      None = 0,
      Register = 10,
      CharSelect = 20,
      GameStart = 30,
      Skill = 40,
      Item = 50,
      Move = 60,
      ActionComplete = 70,
      Purchase = 80,
      Continue = 90,
      EndGame = 100,
      Audience = 110,
    }
    private InputOneofCase inputCase_ = InputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputOneofCase InputCase {
      get { return inputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInput() {
      inputCase_ = InputOneofCase.None;
      input_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Register, other.Register)) return false;
      if (!object.Equals(CharSelect, other.CharSelect)) return false;
      if (!object.Equals(GameStart, other.GameStart)) return false;
      if (!object.Equals(Skill, other.Skill)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(ActionComplete, other.ActionComplete)) return false;
      if (!object.Equals(Purchase, other.Purchase)) return false;
      if (!object.Equals(Continue, other.Continue)) return false;
      if (!object.Equals(EndGame, other.EndGame)) return false;
      if (!object.Equals(Audience, other.Audience)) return false;
      if (InputCase != other.InputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (inputCase_ == InputOneofCase.Register) hash ^= Register.GetHashCode();
      if (inputCase_ == InputOneofCase.CharSelect) hash ^= CharSelect.GetHashCode();
      if (inputCase_ == InputOneofCase.GameStart) hash ^= GameStart.GetHashCode();
      if (inputCase_ == InputOneofCase.Skill) hash ^= Skill.GetHashCode();
      if (inputCase_ == InputOneofCase.Item) hash ^= Item.GetHashCode();
      if (inputCase_ == InputOneofCase.Move) hash ^= Move.GetHashCode();
      if (inputCase_ == InputOneofCase.ActionComplete) hash ^= ActionComplete.GetHashCode();
      if (inputCase_ == InputOneofCase.Purchase) hash ^= Purchase.GetHashCode();
      if (inputCase_ == InputOneofCase.Continue) hash ^= Continue.GetHashCode();
      if (inputCase_ == InputOneofCase.EndGame) hash ^= EndGame.GetHashCode();
      if (inputCase_ == InputOneofCase.Audience) hash ^= Audience.GetHashCode();
      hash ^= (int) inputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (inputCase_ == InputOneofCase.Register) {
        output.WriteRawTag(82);
        output.WriteMessage(Register);
      }
      if (inputCase_ == InputOneofCase.CharSelect) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(CharSelect);
      }
      if (inputCase_ == InputOneofCase.GameStart) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GameStart);
      }
      if (inputCase_ == InputOneofCase.Skill) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Skill);
      }
      if (inputCase_ == InputOneofCase.Item) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Item);
      }
      if (inputCase_ == InputOneofCase.Move) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Move);
      }
      if (inputCase_ == InputOneofCase.ActionComplete) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(ActionComplete);
      }
      if (inputCase_ == InputOneofCase.Purchase) {
        output.WriteRawTag(130, 5);
        output.WriteMessage(Purchase);
      }
      if (inputCase_ == InputOneofCase.Continue) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(Continue);
      }
      if (inputCase_ == InputOneofCase.EndGame) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(EndGame);
      }
      if (inputCase_ == InputOneofCase.Audience) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(Audience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (inputCase_ == InputOneofCase.Register) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
      }
      if (inputCase_ == InputOneofCase.CharSelect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CharSelect);
      }
      if (inputCase_ == InputOneofCase.GameStart) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStart);
      }
      if (inputCase_ == InputOneofCase.Skill) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skill);
      }
      if (inputCase_ == InputOneofCase.Item) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (inputCase_ == InputOneofCase.Move) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (inputCase_ == InputOneofCase.ActionComplete) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActionComplete);
      }
      if (inputCase_ == InputOneofCase.Purchase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Purchase);
      }
      if (inputCase_ == InputOneofCase.Continue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Continue);
      }
      if (inputCase_ == InputOneofCase.EndGame) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndGame);
      }
      if (inputCase_ == InputOneofCase.Audience) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Audience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      switch (other.InputCase) {
        case InputOneofCase.Register:
          if (Register == null) {
            Register = new global::Endless.Stream.V1.Register();
          }
          Register.MergeFrom(other.Register);
          break;
        case InputOneofCase.CharSelect:
          if (CharSelect == null) {
            CharSelect = new global::Endless.Stream.V1.CharSelect();
          }
          CharSelect.MergeFrom(other.CharSelect);
          break;
        case InputOneofCase.GameStart:
          if (GameStart == null) {
            GameStart = new global::Endless.Stream.V1.GameStart();
          }
          GameStart.MergeFrom(other.GameStart);
          break;
        case InputOneofCase.Skill:
          if (Skill == null) {
            Skill = new global::Endless.Stream.V1.UseSkill();
          }
          Skill.MergeFrom(other.Skill);
          break;
        case InputOneofCase.Item:
          if (Item == null) {
            Item = new global::Endless.Stream.V1.UseItem();
          }
          Item.MergeFrom(other.Item);
          break;
        case InputOneofCase.Move:
          if (Move == null) {
            Move = new global::Endless.Stream.V1.Move();
          }
          Move.MergeFrom(other.Move);
          break;
        case InputOneofCase.ActionComplete:
          if (ActionComplete == null) {
            ActionComplete = new global::Endless.Stream.V1.ActionComplete();
          }
          ActionComplete.MergeFrom(other.ActionComplete);
          break;
        case InputOneofCase.Purchase:
          if (Purchase == null) {
            Purchase = new global::Endless.Stream.V1.Purchase();
          }
          Purchase.MergeFrom(other.Purchase);
          break;
        case InputOneofCase.Continue:
          if (Continue == null) {
            Continue = new global::Endless.Stream.V1.Continue();
          }
          Continue.MergeFrom(other.Continue);
          break;
        case InputOneofCase.EndGame:
          if (EndGame == null) {
            EndGame = new global::Endless.Stream.V1.EndGame();
          }
          EndGame.MergeFrom(other.EndGame);
          break;
        case InputOneofCase.Audience:
          if (Audience == null) {
            Audience = new global::Endless.Stream.V1.AudienceYell();
          }
          Audience.MergeFrom(other.Audience);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 82: {
            global::Endless.Stream.V1.Register subBuilder = new global::Endless.Stream.V1.Register();
            if (inputCase_ == InputOneofCase.Register) {
              subBuilder.MergeFrom(Register);
            }
            input.ReadMessage(subBuilder);
            Register = subBuilder;
            break;
          }
          case 162: {
            global::Endless.Stream.V1.CharSelect subBuilder = new global::Endless.Stream.V1.CharSelect();
            if (inputCase_ == InputOneofCase.CharSelect) {
              subBuilder.MergeFrom(CharSelect);
            }
            input.ReadMessage(subBuilder);
            CharSelect = subBuilder;
            break;
          }
          case 242: {
            global::Endless.Stream.V1.GameStart subBuilder = new global::Endless.Stream.V1.GameStart();
            if (inputCase_ == InputOneofCase.GameStart) {
              subBuilder.MergeFrom(GameStart);
            }
            input.ReadMessage(subBuilder);
            GameStart = subBuilder;
            break;
          }
          case 322: {
            global::Endless.Stream.V1.UseSkill subBuilder = new global::Endless.Stream.V1.UseSkill();
            if (inputCase_ == InputOneofCase.Skill) {
              subBuilder.MergeFrom(Skill);
            }
            input.ReadMessage(subBuilder);
            Skill = subBuilder;
            break;
          }
          case 402: {
            global::Endless.Stream.V1.UseItem subBuilder = new global::Endless.Stream.V1.UseItem();
            if (inputCase_ == InputOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 482: {
            global::Endless.Stream.V1.Move subBuilder = new global::Endless.Stream.V1.Move();
            if (inputCase_ == InputOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 562: {
            global::Endless.Stream.V1.ActionComplete subBuilder = new global::Endless.Stream.V1.ActionComplete();
            if (inputCase_ == InputOneofCase.ActionComplete) {
              subBuilder.MergeFrom(ActionComplete);
            }
            input.ReadMessage(subBuilder);
            ActionComplete = subBuilder;
            break;
          }
          case 642: {
            global::Endless.Stream.V1.Purchase subBuilder = new global::Endless.Stream.V1.Purchase();
            if (inputCase_ == InputOneofCase.Purchase) {
              subBuilder.MergeFrom(Purchase);
            }
            input.ReadMessage(subBuilder);
            Purchase = subBuilder;
            break;
          }
          case 722: {
            global::Endless.Stream.V1.Continue subBuilder = new global::Endless.Stream.V1.Continue();
            if (inputCase_ == InputOneofCase.Continue) {
              subBuilder.MergeFrom(Continue);
            }
            input.ReadMessage(subBuilder);
            Continue = subBuilder;
            break;
          }
          case 802: {
            global::Endless.Stream.V1.EndGame subBuilder = new global::Endless.Stream.V1.EndGame();
            if (inputCase_ == InputOneofCase.EndGame) {
              subBuilder.MergeFrom(EndGame);
            }
            input.ReadMessage(subBuilder);
            EndGame = subBuilder;
            break;
          }
          case 882: {
            global::Endless.Stream.V1.AudienceYell subBuilder = new global::Endless.Stream.V1.AudienceYell();
            if (inputCase_ == InputOneofCase.Audience) {
              subBuilder.MergeFrom(Audience);
            }
            input.ReadMessage(subBuilder);
            Audience = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
