syntax = "proto3";
package es;
option go_package = "github.com/seanhagen/endless_stream/protos/go/client";

service Universe {
  // Join is used by a game client to request to join a game server.
  rpc Join(JoinRequest) returns (JoinResponse) {}

  // Leave is used by a game client to indicate they're leaving the
  // game. Closing the stream from Events will also eventually mark
  // the game client as having left, but polite game clients should
  // use this to immediately notify the server they're leaving.
  rpc Leave(LeaveRequest) returns (LeaveResponse) {}

  // FetchAsset is used by a game client to request one or more
  // assets. The assets are streamed to the client in chunks, but not
  // in a specific order. If the client requests more than one asset
  // at a time, the server may response with a chunk from file A, a
  // chunk from file B, a chunk from file B, a chunk from file C,
  // etc. Each chunk has the asset id and an incrementing chunk id;
  // together these should allow a game client to build the asset from
  // chunks regardless of what order the chunks are received in .
  rpc FetchAssets(AssetsRequest) returns (stream AssetResponse) {}

  // ListCharacters returns a list of all of the characters created by
  // the player that are available to use.
  rpc ListCharacters(ListCharRequest) returns (ListCharResponse) {}

  // GetCharacterCreateOptions returns all options available during
  // character creation. This includes the starting stat values, the
  // list of classes, skills, and abilities, as well as any starting
  // equipment options.
  //
  // If a player has run out of character slots, will return a message
  // indicating they can't create any more characters and nothing
  // else.
  rpc GetCharacterCreateOptions(GetCharCreateOptsRequest) returns (stream GetCharCreateOptsResponse) {}

  // CreateCharacter sends a request to create a new character
  rpc CreateCharacter(CrateCharRequest) returns (CrateCharResponse) {}
  rpc SelectCharacter(SelectCharRequest) returns (SelectCharResponse) {}

  // LevelUpCharacer is a bi-directional stream that should only be
  // opened when a client receives a 'LevelUp' ServerEvent from the
  // Events stream. There are two types of request messages that can
  // be sent: query messages and choice messages. Query messages are
  // sent by the client to get more information about a levelling up
  // option. Choice messages are sent by the client to indicate that a
  // choice has been made, which should change the state of the
  // in-progress character level-up on the server.
  //
  // There are two special LevelUpRequest message types:
  //
  //  - LevelUpBeginQuery: sends information about the character to be
  //    levelled up, mostly containing data from the 'LevelUp'
  //    ServerEvent
  //
  //  - FinalizeLevellingUp: tells the server the player has finished
  //    making choices about levelling up their character and to apply
  //    the changes to the character.
  rpc LevelUpCharacter(stream LevelUpRequest) returns (LevelUpResponse) {}

  // Inventory is a bi-directional stream that allows a game client to
  // get notified of changes to a player character's inventory
  // immediately, such as when an item is added or removed from a
  // player's inventory. The client can send requests to query about
  // the inventory state or about specific items within the player's
  // inventory. Adding an item to the character's inventory through
  // player action is a ClientEvent sent to the Events client stream.
  rpc Inventory(stream InventoryRequest) returns (stream InventoryResponse) {}
}

service Overworld {

}

service Overworld {}

service Town {}

service Dungeon {
  // Events is used by clients to send events to the server, and to
  // receive events from the server. Events range from things like
  // server heartbeats to chat messages from other players to
  // combat-related events.
  rpc Events(stream ClientDungeonEvent) returns (stream ServerDungeonEvent) {}

}

// Games is the definition for the service that handles connecting,
// sending, and receiving data from game clients.
service Games {





}
