// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: proto/hex_service.proto

package proto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockHex_GameClient is a mock of Hex_GameClient interface.
type MockHex_GameClient struct {
	ctrl     *gomock.Controller
	recorder *MockHex_GameClientMockRecorder
}

// MockHex_GameClientMockRecorder is the mock recorder for MockHex_GameClient.
type MockHex_GameClientMockRecorder struct {
	mock *MockHex_GameClient
}

// NewMockHex_GameClient creates a new mock instance.
func NewMockHex_GameClient(ctrl *gomock.Controller) *MockHex_GameClient {
	mock := &MockHex_GameClient{ctrl: ctrl}
	mock.recorder = &MockHex_GameClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHex_GameClient) EXPECT() *MockHex_GameClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockHex_GameClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockHex_GameClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockHex_GameClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockHex_GameClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHex_GameClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHex_GameClient)(nil).Context))
}

// Header mocks base method.
func (m *MockHex_GameClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockHex_GameClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHex_GameClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockHex_GameClient) Recv() (*GameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*GameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockHex_GameClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHex_GameClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockHex_GameClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHex_GameClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHex_GameClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockHex_GameClient) Send(arg0 *GameRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockHex_GameClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHex_GameClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockHex_GameClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHex_GameClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHex_GameClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockHex_GameClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockHex_GameClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockHex_GameClient)(nil).Trailer))
}

// MockHex_GameServer is a mock of Hex_GameServer interface.
type MockHex_GameServer struct {
	ctrl     *gomock.Controller
	recorder *MockHex_GameServerMockRecorder
}

// MockHex_GameServerMockRecorder is the mock recorder for MockHex_GameServer.
type MockHex_GameServerMockRecorder struct {
	mock *MockHex_GameServer
}

// NewMockHex_GameServer creates a new mock instance.
func NewMockHex_GameServer(ctrl *gomock.Controller) *MockHex_GameServer {
	mock := &MockHex_GameServer{ctrl: ctrl}
	mock.recorder = &MockHex_GameServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHex_GameServer) EXPECT() *MockHex_GameServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockHex_GameServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHex_GameServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHex_GameServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockHex_GameServer) Recv() (*GameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*GameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockHex_GameServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHex_GameServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockHex_GameServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHex_GameServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHex_GameServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockHex_GameServer) Send(arg0 *GameRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockHex_GameServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHex_GameServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockHex_GameServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockHex_GameServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHex_GameServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockHex_GameServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHex_GameServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHex_GameServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockHex_GameServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockHex_GameServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHex_GameServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockHex_GameServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockHex_GameServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHex_GameServer)(nil).SetTrailer), arg0)
}

// MockHexClient is a mock of HexClient interface.
type MockHexClient struct {
	ctrl     *gomock.Controller
	recorder *MockHexClientMockRecorder
}

// MockHexClientMockRecorder is the mock recorder for MockHexClient.
type MockHexClientMockRecorder struct {
	mock *MockHexClient
}

// NewMockHexClient creates a new mock instance.
func NewMockHexClient(ctrl *gomock.Controller) *MockHexClient {
	mock := &MockHexClient{ctrl: ctrl}
	mock.recorder = &MockHexClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHexClient) EXPECT() *MockHexClientMockRecorder {
	return m.recorder
}

// Game mocks base method.
func (m *MockHexClient) Game(ctx context.Context, opts ...grpc.CallOption) (Hex_GameClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Game", varargs...)
	ret0, _ := ret[0].(Hex_GameClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Game indicates an expected call of Game.
func (mr *MockHexClientMockRecorder) Game(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Game", reflect.TypeOf((*MockHexClient)(nil).Game), varargs...)
}

// Info mocks base method.
func (m *MockHexClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockHexClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockHexClient)(nil).Info), varargs...)
}

// MockHexServer is a mock of HexServer interface.
type MockHexServer struct {
	ctrl     *gomock.Controller
	recorder *MockHexServerMockRecorder
}

// MockHexServerMockRecorder is the mock recorder for MockHexServer.
type MockHexServerMockRecorder struct {
	mock *MockHexServer
}

// NewMockHexServer creates a new mock instance.
func NewMockHexServer(ctrl *gomock.Controller) *MockHexServer {
	mock := &MockHexServer{ctrl: ctrl}
	mock.recorder = &MockHexServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHexServer) EXPECT() *MockHexServerMockRecorder {
	return m.recorder
}

// Game mocks base method.
func (m *MockHexServer) Game(server Hex_GameServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Game", server)
	ret0, _ := ret[0].(error)
	return ret0
}

// Game indicates an expected call of Game.
func (mr *MockHexServerMockRecorder) Game(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Game", reflect.TypeOf((*MockHexServer)(nil).Game), server)
}

// Info mocks base method.
func (m *MockHexServer) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, in)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockHexServerMockRecorder) Info(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockHexServer)(nil).Info), ctx, in)
}

// MockAdmin_ManageClient is a mock of Admin_ManageClient interface.
type MockAdmin_ManageClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdmin_ManageClientMockRecorder
}

// MockAdmin_ManageClientMockRecorder is the mock recorder for MockAdmin_ManageClient.
type MockAdmin_ManageClientMockRecorder struct {
	mock *MockAdmin_ManageClient
}

// NewMockAdmin_ManageClient creates a new mock instance.
func NewMockAdmin_ManageClient(ctrl *gomock.Controller) *MockAdmin_ManageClient {
	mock := &MockAdmin_ManageClient{ctrl: ctrl}
	mock.recorder = &MockAdmin_ManageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin_ManageClient) EXPECT() *MockAdmin_ManageClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAdmin_ManageClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAdmin_ManageClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAdmin_ManageClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAdmin_ManageClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAdmin_ManageClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAdmin_ManageClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAdmin_ManageClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAdmin_ManageClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAdmin_ManageClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAdmin_ManageClient) Recv() (*AdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAdmin_ManageClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAdmin_ManageClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAdmin_ManageClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAdmin_ManageClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAdmin_ManageClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockAdmin_ManageClient) Send(arg0 *AdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAdmin_ManageClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAdmin_ManageClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockAdmin_ManageClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAdmin_ManageClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAdmin_ManageClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockAdmin_ManageClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAdmin_ManageClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAdmin_ManageClient)(nil).Trailer))
}

// MockAdmin_ManageServer is a mock of Admin_ManageServer interface.
type MockAdmin_ManageServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdmin_ManageServerMockRecorder
}

// MockAdmin_ManageServerMockRecorder is the mock recorder for MockAdmin_ManageServer.
type MockAdmin_ManageServerMockRecorder struct {
	mock *MockAdmin_ManageServer
}

// NewMockAdmin_ManageServer creates a new mock instance.
func NewMockAdmin_ManageServer(ctrl *gomock.Controller) *MockAdmin_ManageServer {
	mock := &MockAdmin_ManageServer{ctrl: ctrl}
	mock.recorder = &MockAdmin_ManageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin_ManageServer) EXPECT() *MockAdmin_ManageServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAdmin_ManageServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAdmin_ManageServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAdmin_ManageServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAdmin_ManageServer) Recv() (*AdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAdmin_ManageServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAdmin_ManageServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAdmin_ManageServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAdmin_ManageServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAdmin_ManageServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockAdmin_ManageServer) Send(arg0 *AdminRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAdmin_ManageServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAdmin_ManageServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAdmin_ManageServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAdmin_ManageServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAdmin_ManageServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockAdmin_ManageServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAdmin_ManageServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAdmin_ManageServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockAdmin_ManageServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAdmin_ManageServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAdmin_ManageServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAdmin_ManageServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAdmin_ManageServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAdmin_ManageServer)(nil).SetTrailer), arg0)
}

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// Manage mocks base method.
func (m *MockAdminClient) Manage(ctx context.Context, opts ...grpc.CallOption) (Admin_ManageClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Manage", varargs...)
	ret0, _ := ret[0].(Admin_ManageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manage indicates an expected call of Manage.
func (mr *MockAdminClientMockRecorder) Manage(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manage", reflect.TypeOf((*MockAdminClient)(nil).Manage), varargs...)
}

// MockAdminServer is a mock of AdminServer interface.
type MockAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServerMockRecorder
}

// MockAdminServerMockRecorder is the mock recorder for MockAdminServer.
type MockAdminServerMockRecorder struct {
	mock *MockAdminServer
}

// NewMockAdminServer creates a new mock instance.
func NewMockAdminServer(ctrl *gomock.Controller) *MockAdminServer {
	mock := &MockAdminServer{ctrl: ctrl}
	mock.recorder = &MockAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServer) EXPECT() *MockAdminServerMockRecorder {
	return m.recorder
}

// Manage mocks base method.
func (m *MockAdminServer) Manage(server Admin_ManageServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manage", server)
	ret0, _ := ret[0].(error)
	return ret0
}

// Manage indicates an expected call of Manage.
func (mr *MockAdminServerMockRecorder) Manage(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manage", reflect.TypeOf((*MockAdminServer)(nil).Manage), server)
}
