// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Manage_FullMethodName = "/endless.Admin/Manage"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Manage(ctx context.Context, opts ...grpc.CallOption) (Admin_ManageClient, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Manage(ctx context.Context, opts ...grpc.CallOption) (Admin_ManageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], Admin_Manage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminManageClient{stream}
	return x, nil
}

type Admin_ManageClient interface {
	Send(*AdminRequest) error
	Recv() (*AdminResponse, error)
	grpc.ClientStream
}

type adminManageClient struct {
	grpc.ClientStream
}

func (x *adminManageClient) Send(m *AdminRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminManageClient) Recv() (*AdminResponse, error) {
	m := new(AdminResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Manage(Admin_ManageServer) error
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Manage(Admin_ManageServer) error {
	return status.Errorf(codes.Unimplemented, "method Manage not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Manage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminServer).Manage(&adminManageServer{stream})
}

type Admin_ManageServer interface {
	Send(*AdminResponse) error
	Recv() (*AdminRequest, error)
	grpc.ServerStream
}

type adminManageServer struct {
	grpc.ServerStream
}

func (x *adminManageServer) Send(m *AdminResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminManageServer) Recv() (*AdminRequest, error) {
	m := new(AdminRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endless.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Manage",
			Handler:       _Admin_Manage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "admin/admin.proto",
}
