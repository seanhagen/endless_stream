// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/hex_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hex_Info_FullMethodName = "/endless.Hex/Info"
	Hex_Game_FullMethodName = "/endless.Hex/Game"
)

// HexClient is the client API for Hex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HexClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Game(ctx context.Context, opts ...grpc.CallOption) (Hex_GameClient, error)
}

type hexClient struct {
	cc grpc.ClientConnInterface
}

func NewHexClient(cc grpc.ClientConnInterface) HexClient {
	return &hexClient{cc}
}

func (c *hexClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Hex_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexClient) Game(ctx context.Context, opts ...grpc.CallOption) (Hex_GameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hex_ServiceDesc.Streams[0], Hex_Game_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hexGameClient{stream}
	return x, nil
}

type Hex_GameClient interface {
	Send(*GameRequest) error
	Recv() (*GameResponse, error)
	grpc.ClientStream
}

type hexGameClient struct {
	grpc.ClientStream
}

func (x *hexGameClient) Send(m *GameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hexGameClient) Recv() (*GameResponse, error) {
	m := new(GameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HexServer is the server API for Hex service.
// All implementations must embed UnimplementedHexServer
// for forward compatibility
type HexServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Game(Hex_GameServer) error
	mustEmbedUnimplementedHexServer()
}

// UnimplementedHexServer must be embedded to have forward compatible implementations.
type UnimplementedHexServer struct {
}

func (UnimplementedHexServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedHexServer) Game(Hex_GameServer) error {
	return status.Errorf(codes.Unimplemented, "method Game not implemented")
}
func (UnimplementedHexServer) mustEmbedUnimplementedHexServer() {}

// UnsafeHexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HexServer will
// result in compilation errors.
type UnsafeHexServer interface {
	mustEmbedUnimplementedHexServer()
}

func RegisterHexServer(s grpc.ServiceRegistrar, srv HexServer) {
	s.RegisterService(&Hex_ServiceDesc, srv)
}

func _Hex_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hex_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hex_Game_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HexServer).Game(&hexGameServer{stream})
}

type Hex_GameServer interface {
	Send(*GameResponse) error
	Recv() (*GameRequest, error)
	grpc.ServerStream
}

type hexGameServer struct {
	grpc.ServerStream
}

func (x *hexGameServer) Send(m *GameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hexGameServer) Recv() (*GameRequest, error) {
	m := new(GameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hex_ServiceDesc is the grpc.ServiceDesc for Hex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endless.Hex",
	HandlerType: (*HexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Hex_Info_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Game",
			Handler:       _Hex_Game_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hex_service.proto",
}

const (
	Admin_Manage_FullMethodName = "/endless.Admin/Manage"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Manage(ctx context.Context, opts ...grpc.CallOption) (Admin_ManageClient, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Manage(ctx context.Context, opts ...grpc.CallOption) (Admin_ManageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], Admin_Manage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminManageClient{stream}
	return x, nil
}

type Admin_ManageClient interface {
	Send(*AdminRequest) error
	Recv() (*AdminResponse, error)
	grpc.ClientStream
}

type adminManageClient struct {
	grpc.ClientStream
}

func (x *adminManageClient) Send(m *AdminRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminManageClient) Recv() (*AdminResponse, error) {
	m := new(AdminResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Manage(Admin_ManageServer) error
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Manage(Admin_ManageServer) error {
	return status.Errorf(codes.Unimplemented, "method Manage not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Manage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminServer).Manage(&adminManageServer{stream})
}

type Admin_ManageServer interface {
	Send(*AdminResponse) error
	Recv() (*AdminRequest, error)
	grpc.ServerStream
}

type adminManageServer struct {
	grpc.ServerStream
}

func (x *adminManageServer) Send(m *AdminResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminManageServer) Recv() (*AdminRequest, error) {
	m := new(AdminRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endless.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Manage",
			Handler:       _Admin_Manage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hex_service.proto",
}

const (
	Test_Ping_FullMethodName         = "/endless.Test/Ping"
	Test_ClientStream_FullMethodName = "/endless.Test/ClientStream"
	Test_ServerStream_FullMethodName = "/endless.Test/ServerStream"
	Test_BiDiStream_FullMethodName   = "/endless.Test/BiDiStream"
)

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongResp, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamClient, error)
	BiDiStream(ctx context.Context, opts ...grpc.CallOption) (Test_BiDiStreamClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongResp, error) {
	out := new(PongResp)
	err := c.cc.Invoke(ctx, Test_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], Test_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testClientStreamClient{stream}
	return x, nil
}

type Test_ClientStreamClient interface {
	Send(*TestStreamRequest) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testClientStreamClient struct {
	grpc.ClientStream
}

func (x *testClientStreamClient) Send(m *TestStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testClientStreamClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) ServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], Test_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamClient interface {
	Recv() (*TestStreamResponse, error)
	grpc.ClientStream
}

type testServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServerStreamClient) Recv() (*TestStreamResponse, error) {
	m := new(TestStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) BiDiStream(ctx context.Context, opts ...grpc.CallOption) (Test_BiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], Test_BiDiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testBiDiStreamClient{stream}
	return x, nil
}

type Test_BiDiStreamClient interface {
	Send(*TestStreamRequest) error
	CloseAndRecv() (*TestStreamResponse, error)
	grpc.ClientStream
}

type testBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *testBiDiStreamClient) Send(m *TestStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBiDiStreamClient) CloseAndRecv() (*TestStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	Ping(context.Context, *PingReq) (*PongResp, error)
	ClientStream(Test_ClientStreamServer) error
	ServerStream(*TestRequest, Test_ServerStreamServer) error
	BiDiStream(Test_BiDiStreamServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) Ping(context.Context, *PingReq) (*PongResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTestServer) ClientStream(Test_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestServer) ServerStream(*TestRequest, Test_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestServer) BiDiStream(Test_BiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStream(&testClientStreamServer{stream})
}

type Test_ClientStreamServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*TestStreamRequest, error)
	grpc.ServerStream
}

type testClientStreamServer struct {
	grpc.ServerStream
}

func (x *testClientStreamServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testClientStreamServer) Recv() (*TestStreamRequest, error) {
	m := new(TestStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &testServerStreamServer{stream})
}

type Test_ServerStreamServer interface {
	Send(*TestStreamResponse) error
	grpc.ServerStream
}

type testServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServerStreamServer) Send(m *TestStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_BiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).BiDiStream(&testBiDiStreamServer{stream})
}

type Test_BiDiStreamServer interface {
	SendAndClose(*TestStreamResponse) error
	Recv() (*TestStreamRequest, error)
	grpc.ServerStream
}

type testBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *testBiDiStreamServer) SendAndClose(m *TestStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBiDiStreamServer) Recv() (*TestStreamRequest, error) {
	m := new(TestStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endless.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Test_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Test_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiDiStream",
			Handler:       _Test_BiDiStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hex_service.proto",
}
