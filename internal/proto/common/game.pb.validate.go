// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/game.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Ping with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingMultiError, or nil if none found.
func (m *Ping) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingMultiError(errors)
	}

	return nil
}

// PingMultiError is an error wrapping multiple validation errors returned by
// Ping.ValidateAll() if the designated constraints aren't met.
type PingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingMultiError) AllErrors() []error { return m }

// PingValidationError is the validation error returned by Ping.Validate if the
// designated constraints aren't met.
type PingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingValidationError) ErrorName() string { return "PingValidationError" }

// Error satisfies the builtin error interface
func (e PingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingValidationError{}

// Validate checks the field values on Pong with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pong with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PongMultiError, or nil if none found.
func (m *Pong) ValidateAll() error {
	return m.validate(true)
}

func (m *Pong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PongMultiError(errors)
	}

	return nil
}

// PongMultiError is an error wrapping multiple validation errors returned by
// Pong.ValidateAll() if the designated constraints aren't met.
type PongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PongMultiError) AllErrors() []error { return m }

// PongValidationError is the validation error returned by Pong.Validate if the
// designated constraints aren't met.
type PongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PongValidationError) ErrorName() string { return "PongValidationError" }

// Error satisfies the builtin error interface
func (e PongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PongValidationError{}

// Validate checks the field values on Level with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Level) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Level with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LevelMultiError, or nil if none found.
func (m *Level) ValidateAll() error {
	return m.validate(true)
}

func (m *Level) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LevelValidationError{
						field:  fmt.Sprintf("Tiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LevelValidationError{
						field:  fmt.Sprintf("Tiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LevelValidationError{
					field:  fmt.Sprintf("Tiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Tileset

	if len(errors) > 0 {
		return LevelMultiError(errors)
	}

	return nil
}

// LevelMultiError is an error wrapping multiple validation errors returned by
// Level.ValidateAll() if the designated constraints aren't met.
type LevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LevelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LevelMultiError) AllErrors() []error { return m }

// LevelValidationError is the validation error returned by Level.Validate if
// the designated constraints aren't met.
type LevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LevelValidationError) ErrorName() string { return "LevelValidationError" }

// Error satisfies the builtin error interface
func (e LevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LevelValidationError{}

// Validate checks the field values on Heartbeat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Heartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Heartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatMultiError, or nil
// if none found.
func (m *Heartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *Heartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeartbeatValidationError{
					field:  "Beat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeartbeatValidationError{
					field:  "Beat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeartbeatValidationError{
				field:  "Beat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HeartbeatMultiError(errors)
	}

	return nil
}

// HeartbeatMultiError is an error wrapping multiple validation errors returned
// by Heartbeat.ValidateAll() if the designated constraints aren't met.
type HeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatMultiError) AllErrors() []error { return m }

// HeartbeatValidationError is the validation error returned by
// Heartbeat.Validate if the designated constraints aren't met.
type HeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatValidationError) ErrorName() string { return "HeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatValidationError{}

// Validate checks the field values on GameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameRequestMultiError, or
// nil if none found.
func (m *GameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	switch v := m.Request.(type) {
	case *GameRequest_Ping:
		if v == nil {
			err := GameRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameRequestValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameRequestValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameRequestValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GameRequestMultiError(errors)
	}

	return nil
}

// GameRequestMultiError is an error wrapping multiple validation errors
// returned by GameRequest.ValidateAll() if the designated constraints aren't met.
type GameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameRequestMultiError) AllErrors() []error { return m }

// GameRequestValidationError is the validation error returned by
// GameRequest.Validate if the designated constraints aren't met.
type GameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameRequestValidationError) ErrorName() string { return "GameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameRequestValidationError{}

// Validate checks the field values on GameResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameResponseMultiError, or
// nil if none found.
func (m *GameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	switch v := m.Message.(type) {
	case *GameResponse_Heartbeat:
		if v == nil {
			err := GameResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameResponseValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GameResponse_Log:
		if v == nil {
			err := GameResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLog()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Log",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Log",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameResponseValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GameResponse_Level:
		if v == nil {
			err := GameResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLevel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Level",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Level",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameResponseValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GameResponse_Pong:
		if v == nil {
			err := GameResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameResponseValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameResponseValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GameResponseMultiError(errors)
	}

	return nil
}

// GameResponseMultiError is an error wrapping multiple validation errors
// returned by GameResponse.ValidateAll() if the designated constraints aren't met.
type GameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameResponseMultiError) AllErrors() []error { return m }

// GameResponseValidationError is the validation error returned by
// GameResponse.Validate if the designated constraints aren't met.
type GameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameResponseValidationError) ErrorName() string { return "GameResponseValidationError" }

// Error satisfies the builtin error interface
func (e GameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameResponseValidationError{}
