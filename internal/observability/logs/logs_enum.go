// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package logs

import (
	"fmt"
	"strings"
)

const (
	// LogTypeText is a LogType of type Text.
	LogTypeText LogType = iota
	// LogTypeJSON is a LogType of type JSON.
	LogTypeJSON
)

var ErrInvalidLogType = fmt.Errorf("not a valid LogType, try [%s]", strings.Join(_LogTypeNames, ", "))

const _LogTypeName = "TextJSON"

var _LogTypeNames = []string{
	_LogTypeName[0:4],
	_LogTypeName[4:8],
}

// LogTypeNames returns a list of possible string values of LogType.
func LogTypeNames() []string {
	tmp := make([]string, len(_LogTypeNames))
	copy(tmp, _LogTypeNames)
	return tmp
}

// LogTypeValues returns a list of the values for LogType
func LogTypeValues() []LogType {
	return []LogType{
		LogTypeText,
		LogTypeJSON,
	}
}

var _LogTypeMap = map[LogType]string{
	LogTypeText: _LogTypeName[0:4],
	LogTypeJSON: _LogTypeName[4:8],
}

// String implements the Stringer interface.
func (x LogType) String() string {
	if str, ok := _LogTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LogType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogType) IsValid() bool {
	_, ok := _LogTypeMap[x]
	return ok
}

var _LogTypeValue = map[string]LogType{
	_LogTypeName[0:4]:                  LogTypeText,
	strings.ToLower(_LogTypeName[0:4]): LogTypeText,
	_LogTypeName[4:8]:                  LogTypeJSON,
	strings.ToLower(_LogTypeName[4:8]): LogTypeJSON,
}

// ParseLogType attempts to convert a string to a LogType.
func ParseLogType(name string) (LogType, error) {
	if x, ok := _LogTypeValue[name]; ok {
		return x, nil
	}
	return LogType(0), fmt.Errorf("%s is %w", name, ErrInvalidLogType)
}

func (x LogType) Ptr() *LogType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x LogType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *LogType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLogType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
