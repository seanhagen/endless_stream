#+OPTIONS: ^:nil
* Tasks
** TODO Basic Server Setup [1/6]
*** DONE Set up minikube on laptop
CLOSED: [2024-02-19 Mon 15:11]
For local development when not at home. If it takes more than one step, create a
setup script.

*** NEXT Create basic server
Need to create a basic, simple server that's got the Agones SDK set up so that I
can get a handle on game server lifetime stuff. Doesn't need to do much, just a
simple GPRC server with a bi-directional stream that keeps track of how many
clients are connected and marks itself for shutdown/destruction some time after
the last client disconnects.
**** Some architecture stuf
 - folders ( from repo root ) :
   - [X] =/protos= => all protobuf definitions
   - [X] =/internal/proto= => all protobuf generated Go code
   - [X] =/internal/game= => defines server, without transport mechanism
   - [X] =/internal/transport/grpc= => defines GRPC server that handles GRPC <->
     Game server translation ( hex architecture )
   - [ ] =/cmd/overlord= => main server binary
**** DONE set up GRPC server wrapper
CLOSED: [2024-04-30 Tue 16:45]
**** STARTED set up game server skeleton
Package that defines a basic server, handles connections, messages, etc. The
Agones SDK should be passed in to the constructor ( via config, and should
expect an interface, not actual Agones SDK client thing ).
***** TODO add API for player connecting
No authentication, that should be handled by the GRPC service. Instead, should
just need to be passed a player [[https://github.com/rs/xid][XID]] to know who the player is.

***** TODO add API for player disconnecting
For when players intentionally leave the game ( ie, quit ).

***** TODO add handling of player unintentional disconnect
With a grace period, so that players who disconnect have some time to get
re-connected before they're booted from the game world.

***** TODO sort out server <-> player state handling
What is sent to the player by the server? What is sent to the server by the
player? How much is kept in the server?

***** TODO build package for handling hex maps
For now, just manual map creation.

Only need these types of tiles:
 - wall
 - door
 - floor

***** TODO add hex map message types to protobuf schema
***** TODO implement tile rendering in game client
Start with just one tilemap; a dungeon tile map. Make sure to update the
protobuf schema so that names/ids match.

***** TODO add 'admin' methods
Should require the user be identified as an admin.

For now, just need a few commands:
 - add hex tile
 - remove hex tile
 - change hex tile
**** BACKLOG set up server command
Binary that sets up dependencies and injects them as part of setting up the
server.

**** BACKLOG build & local deploy process
Magefile target for building the code, and another task ( or tasks ) for
handling doing the Docker build, tagging, and deploying to K8s.

*** BACKLOG Create TUI "game" app
Need a console client so I can test things out without having to create a whole
game build.

*** BACKLOG Set up Turing Pi 2 cluster as kubernetes cluster
Not sure if I want to use the RPi cluster or the other cluster, but either way
get one of the Turing Pi 2 boards set up so that I can install kubernetes on
it.

**** BACKLOG Setup tailscale on kubernetes
Once I get to the point I want to start sending clients to people to test stuff
out, I would rather just test with the Turing Pi cluster. Easiest way to handle
that is probably figuring out how to set up Tailscale with ACLs so that only
specific users/guests have access to it ( or only have access to that and
nothing else )

*** BACKLOG Set up Agones
Figure out good way to install it to a kubernetes cluster. Preferably via some
kind of ops-as-code solution, so that it's super easy to move or set up a new
cluster.

*** TODO Create build pipeline via GitHub Actions
Initially all I need is to run tests, but would be nice to have it set up to do
stuff like:
 - notifies with test results ( via comment, or some other mechanism; preferably
   not publishing a GitHub Page )
 - also runs benchmarks and reports results
 - runs golangci-lint and reports results
 - runs security vulnerability tools ( and reports results )

** BACKLOG DevOps Stuff To Finish Setting Up
*** BACKLOG Magefile target for deploying
Once I've got Agones & Kubernetes set up, need a Magefile target for deploying,
including:

 - [ ] building the docker container
 - [ ] shrinking the docker container
 - [ ] running security tooling on the docker container
 - [ ] uploading the container to a registry
 - [ ] creating an updated k8s/agones configuration
 - [ ] deploying to a dev environment ( turing pi 2 )
 - [ ] deploying to a test environment
 - [ ] deploying to production

*** BACKLOG Magefile target for running other tooling
other than golangci-lint, tests, and security scanning

*** BACKLOG Magefile target for optimizing assets
eventually the server will be serving up assets to the game. need to figure out
how to optimize them.

*** BACKLOG Magefile target for running local server
 - with hot reloading?

* Notes
** Game Server & Hexagonal Architecture
Basically, I want to figure out how to do this:

#+begin_quote
GRPC -> GRPC Handler -> Game Server
HTTP -> HTTP Handler -> Game Server
WebSockets -> WS Handler -> Game Server
#+end_quote

IE, it doesn't matter what the communication transport is, I just need to have
handlers for each transport type that can handle the incoming requests.

What I have to figure out now is what the API of the Game Server type will
be. How closely will it match the GRPC API? I don't really want to have it match
1-to-1; but I also don't want the piece that sits between the transport layer &
the game server to be hideously complicated.

Let's start by seeing how this all would work for GRPC.

*** GRPC
Here's what we're breaking down:
#+begin_quote
GRPC -> GRPC Handler -> Game Server
#+end_quote

The =GRPC -> GRPC Handler= is already defined for us; it's a side effect of
GRPC. A protobuf like this:

#+begin_src protobuf
service Hex {
  rpc Info(InfoRequest) returns (InfoResponse);
  rpc Game(stream GameRequest) returns (stream GameResponse);
}
#+end_src

Becomes an interface like this:
#+begin_src go
  type HexServer interface {
  	Info(context.Context, *InfoRequest) (*InfoResponse, error)
  	Game(Hex_GameServer) error
  	mustEmbedUnimplementedHexServer()
  }
#+end_src

To implement, we create a struct:
#+begin_src go
  type myHexServer struct {
  	proto.UnimplementedHexServer
  }
#+end_src

And define methods that match each of the interface methods.

The trick is that the =Game(stream GameRequest)= RPC accepts =GameRequest=, which
contains this:
#+begin_src protobuf
  oneof request {
    InfoRequest info = 2;
    GetLevel get_level = 3;
  }
#+end_src

My idea was to keep extending that with more request types as needed.

I don't really want the game server to have what amounts to the same API; mostly
because I don't want to end up using the protobuf message types as the "domain"
types. That, and the types have names like =GameRequest_Info=.

Maybe the GRPC Handler uses a switch to fan out to the correct handler function
for the =request= type.

So the thing to target for a test would be this:

 - given a properly constructed client
 - given a GRPC server that's configured to register the handlers
 - given the GRPC handler defines an interface for the behaviour expected from
   the game server
 - given we have a test implementation of the game server interface defined by
   the GRPC handler

I should be able to use the GRPC client to make a call and then see it recorded
in the test implementation of the game server.

That would also let me set up tests for middleware; validate that things like
rate limiting, authentication, etc are all working properly.

**** Transport Layer
 - handles setting up GRPC server ( not each service! )
 - when created, needs to be passed a configuration that includes
   - a way to specify servers to register during startup
   - including grpc-gateway or others
 - this handles setting up the =grpc.NewServer=, the listener, all that stuff
 - launches own goroutine for listening on the socket when started

 for testing:
  - how to inject a [[https://pkg.go.dev/net#Listener][net.Listener]] so that a mock or stub can be passed in for tests?

 other concerns;
  - how to pass in middleware/interceptors?
  - how to configure grpc-gateway
  - how to configure the dialer needed for grpc-gateway, that works with the
    listener injected during tests?

***** Testing The Transport Layer
Need to do at least two things to test:
 - create a service and pass in the net.Listener as part of the config. use that
   listener to configure a client, use that to test.
 - create a service, use default net.Listener to test. create a client,

Also need to test:
 - SSL configuration ( normal TLS & mTLS )
 - GRPC Only
 - GRPC with Gateway
 - GRPC with Gateway on different port
 - Custom listener ( will be used by all the other tests )
 - timeouts
 - interceptors
 - dial options
 - stats handlers
 - keepalive options
 - configured maximums ( recv msg size, send msg size, concurrent streams, etc )
 - custom unknown service handler
 - transport credentials configuration

**** Services
 - need an 'application' framework similar to Biba for holding things like
   config, service clients, etc
 - each service should at least match an interface used by the transport layer
   to handle registration & startup stuff

**** Game Server
 - passed into services as a dependency ( at least the Hex & Admin services )
   - Hex & Admin should define a limited interface that defines the API they
     need to be able to work with the game server
   - ie, Hex service defines an interface for doing things like handling player
     requests, logs, etc
   - while Admin service defines an interface for doing things like kicking
     players, modifying the game world, etc
 - would be launched in it's own goroutine separate from the GRPC/HTTP/etc
   transport layer
   - should probably manage it's own goroutine?

*** Thing To Remember
The GRPC Handler is basically the container for things like authentication,
validation, rate limiting, etc. The game server shouldn't care about any of
that; it should just be focused on managing the game state and returning game
state data to callers.

** Agones & Testing The Game Server
I should write a wrapper for the Agones SDK so that I have a small API that is
easy to cover with an interface. That way when testing I can basically stub/mock
out the Agones stuff so I can focus on game server internals. The Agones stuff
can wait until later, for now.

** How To Test GRPC
*** Servers
The examples use the [[https://github.com/grpc/grpc-go/tree/master/examples/helloworld][helloworld]] protos.

A server is created by doing the following:
#+begin_src go
  s := grpc.NewServer()
	pb.RegisterGreeterServer(s, &server{})
#+end_src

Basically, =grpc.NewServer= creates the type that handles most of the work;
listening for clients, serializing & de-serializing messages, dealing with
errors returned from handlers, etc.

The register function registered the provided type as the implementation of that
server/service.

So to test the server, can just test the handler functions the same as I would
for any other type that has methods.

*** Clients
Clients are defined as interfaces:
#+begin_src go
type HexClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Game(ctx context.Context, opts ...grpc.CallOption) (Hex_GameClient, error)
}
#+end_src

So anything expecting a HexClient can just be passed a type that implements the
correct methods.
** Server Roles
Big architecture question: how to handle players connecting & what are they
connecting to?

There are four types of areas; the overworld, towns, dungeons, & special areas.

I don't think it makes sense to have players connect directly to the overworld
server, or the town or dungeon servers. Rather, they should be connecting to a
kind of "proxy" server, that handles communication with the other servers on the
player's behalf.

This is because the server doesn't know what a player wants to do until they,
you know, start doing it.

*** Known Server Types
Before I start going down rabbit holes trying to figure this out, let's lay out
what server types I know I'm going to end up needing:

 - overworld
 - dungeon/town/special areas ( they're all basically the same thing; player +
   other players + hex map )
 - player ( inventory, levelling up, etc )

Additionally, I can see there being a few other types of servers with special
roles:

 - dungeon keeper -- handles dungeon life cycles, generating dungeons,
   populating, etc
 - quest manager -- handles generating new quests, the quest log, telling the
   dungeon keeper to create/prepare an instance of a dungeon (not sure about
   that last one though)
 - monster wrangler -- for when a monster levels up due to finding some gear,
   when they leave their dungeon to become a wandering monster, etc
 - wall street -- handles tracking prices, supply & demand, etc for all
   merchants to better simulate a real economy
 - meeple handler -- handles conversations with NPCs ( excluding merchants ),
   tracking how each faction views a player ( like, neutral, dislike, etc )

*** Architecture
Player connects to a proxy; proxy has live streaming connections to each of the
other types of server.
